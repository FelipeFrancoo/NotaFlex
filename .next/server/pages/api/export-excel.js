"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/export-excel";
exports.ids = ["pages/api/export-excel"];
exports.modules = {

/***/ "exceljs":
/*!**************************!*\
  !*** external "exceljs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("exceljs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\export-excel.ts */ \"(api)/./pages/api/export-excel.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/export-excel\",\n        pathname: \"/api/export-excel\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV4cG9ydC1leGNlbCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZXhwb3J0LWV4Y2VsLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzBEO0FBQzFEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx1REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsdURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90YWZsZXgtbmV4dGpzLz9kNGZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcZXhwb3J0LWV4Y2VsLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZXhwb3J0LWV4Y2VsXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZXhwb3J0LWV4Y2VsXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/export-excel.ts":
/*!***********************************!*\
  !*** ./pages/api/export-excel.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var exceljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! exceljs */ \"exceljs\");\n/* harmony import */ var exceljs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(exceljs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Utilitário seguro para parse de datas DD/MM/AAAA\nfunction parsePtBrDate(dateStr) {\n    if (dateStr instanceof Date) return dateStr;\n    if (typeof dateStr !== \"string\") return new Date();\n    const trimmed = dateStr.trim();\n    const m = trimmed.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/);\n    if (m) {\n        const d = parseInt(m[1], 10);\n        const mo = parseInt(m[2], 10) - 1;\n        const y = parseInt(m[3], 10);\n        const dt = new Date(y, mo, d);\n        // Validar (Date auto corrige overflow; precisamos garantir integridade)\n        if (dt.getFullYear() === y && dt.getMonth() === mo && dt.getDate() === d) {\n            return dt;\n        }\n    }\n    // Tentar fallback ISO\n    const iso = new Date(trimmed);\n    if (!isNaN(iso.getTime())) return iso;\n    return new Date(); // fallback seguro\n}\n// Estilos Excel obrigatórios\nconst headerStyle = {\n    font: {\n        bold: true,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"2F5597\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    },\n    border: {\n        top: {\n            style: \"thin\"\n        },\n        left: {\n            style: \"thin\"\n        },\n        bottom: {\n            style: \"thin\"\n        },\n        right: {\n            style: \"thin\"\n        }\n    }\n};\nconst cellStyle = {\n    border: {\n        top: {\n            style: \"thin\"\n        },\n        left: {\n            style: \"thin\"\n        },\n        bottom: {\n            style: \"thin\"\n        },\n        right: {\n            style: \"thin\"\n        }\n    }\n};\nconst titleStyle = {\n    font: {\n        bold: true,\n        size: 16,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"2F5597\"\n        }\n    }\n};\nconst subHeaderStyle = {\n    font: {\n        bold: true,\n        size: 14,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"1F4E79\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    }\n};\nconst totalRowStyle = {\n    font: {\n        bold: true,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"366092\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    }\n};\nasync function handler(req, res) {\n    console.log(\"=== INICIANDO EXPORT-EXCEL ===\");\n    console.log(\"Method:\", req.method);\n    console.log(\"Headers:\", req.headers);\n    try {\n        // Extrair informações do relatório com proteção caso body seja undefined\n        const body = req.body || {};\n        console.log(\"Body keys:\", Object.keys(body));\n        console.log(\"Body type:\", typeof body);\n        const { name: reportName, startDate, endDate, categories, processedData } = body;\n        let summaryData = null;\n        let allInvoices = [];\n        let allBranchSummaries = [];\n        // Verificar se existe dados processados reais do upload-csv\n        if (req.method === \"POST\") {\n            console.log(\"=== DADOS RECEBIDOS NO EXPORT-EXCEL ===\");\n            console.log(\"Has processedData:\", !!body.processedData);\n            if (body.processedData && Array.isArray(body.processedData.transactions)) {\n                console.log(\"=== USANDO DADOS REAIS DO UPLOAD ===\");\n                console.log(\"Total transactions:\", body.processedData.transactions.length);\n                console.log(\"Primeiras transa\\xe7\\xf5es:\", body.processedData.transactions.slice(0, 3));\n                // Converter dados reais para formato esperado pelo Excel\n                const realData = body.processedData;\n                // Agrupar transações por filial para criar summaryData\n                const branchMap = new Map();\n                const allTransactions = [];\n                realData.transactions.forEach((transaction, index)=>{\n                    try {\n                        if (!transaction) {\n                            console.warn(\"[EXPORT] Transa\\xe7\\xe3o nula encontrada no \\xedndice:\", index);\n                            return;\n                        }\n                        console.log(`[EXPORT] Processando transação ${index}:`, {\n                            vencimento: transaction.vencimento,\n                            transacionador: transaction.transacionador,\n                            valor: transaction.valorNumerico,\n                            tipo: transaction.documentType\n                        });\n                        const branch = transaction.filial || realData.branchTotals?.[0]?.branch || \"FILIAL PRINCIPAL\";\n                        const sourceFile = transaction.sourceFile || `${branch}.csv`;\n                        if (!branchMap.has(branch)) {\n                            branchMap.set(branch, {\n                                totalAPagar: 0,\n                                totalAReceber: 0\n                            });\n                        }\n                        const branchData = branchMap.get(branch);\n                        const valorNumerico = transaction.valorNumerico || 0;\n                        // Usar tipo vindo do processamento (valor default A_PAGAR caso ausente)\n                        const documentType = transaction.documentType === \"A_RECEBER\" ? \"A_RECEBER\" : \"A_PAGAR\";\n                        // Parse data robusto\n                        const parsedDate = parsePtBrDate(transaction.vencimento);\n                        if (isNaN(parsedDate.getTime())) {\n                            console.warn(\"[EXPORT] Ignorando transa\\xe7\\xe3o com data inv\\xe1lida:\", transaction.vencimento, transaction);\n                            return;\n                        }\n                        if (typeof valorNumerico !== \"number\" || isNaN(Number(valorNumerico))) {\n                            console.warn(\"[EXPORT] Ignorando transa\\xe7\\xe3o com valor inv\\xe1lido:\", valorNumerico, transaction);\n                            return;\n                        }\n                        if (documentType === \"A_PAGAR\") {\n                            branchData.totalAPagar += Math.abs(valorNumerico);\n                        } else {\n                            branchData.totalAReceber += Math.abs(valorNumerico);\n                        }\n                        // Converter para formato InvoiceData\n                        allTransactions.push({\n                            id: `real_${index}`,\n                            branch: branch,\n                            invoiceNumber: transaction.documento || `DOC-${index}`,\n                            date: parsedDate,\n                            value: transaction.valor || `R$ 0,00`,\n                            supplier: transaction.transacionador || \"FORNECEDOR N\\xc3O IDENTIFICADO\",\n                            documentType: documentType,\n                            sourceFile: sourceFile,\n                            valueNumeric: Math.abs(valorNumerico)\n                        });\n                    } catch (transactionErr) {\n                        console.error(\"[EXPORT] Erro ao processar transa\\xe7\\xe3o:\", index, transactionErr, transaction);\n                    }\n                });\n                // Criar summaryData a partir dos dados reais\n                const branches = Array.from(branchMap.entries()).map(([name, totals])=>({\n                        name,\n                        totalAPagar: totals.totalAPagar,\n                        totalAReceber: totals.totalAReceber,\n                        total: totals.totalAPagar + totals.totalAReceber\n                    }));\n                summaryData = {\n                    branches,\n                    dateSpecificTotals: [],\n                    grandTotal: branches.reduce((sum, b)=>sum + b.total, 0),\n                    grandTotalAPagar: branches.reduce((sum, b)=>sum + b.totalAPagar, 0),\n                    grandTotalAReceber: branches.reduce((sum, b)=>sum + b.totalAReceber, 0)\n                };\n                allInvoices = allTransactions;\n                allBranchSummaries = branches.map((branch)=>({\n                        branch: branch.name,\n                        invoiceCount: allTransactions.filter((inv)=>inv.branch === branch.name).length,\n                        totalValue: branch.total.toLocaleString(\"pt-BR\", {\n                            style: \"currency\",\n                            currency: \"BRL\"\n                        })\n                    }));\n                console.log(\"=== DADOS CONVERTIDOS ===\");\n                console.log(\"Branches criadas:\", branches.length);\n                console.log(\"Total invoices:\", allInvoices.length);\n                console.log(\"Summary grandTotal:\", summaryData.grandTotal);\n            } else if (body.summaryData) {\n                console.log(\"=== USANDO DADOS FORNECIDOS NO BODY ===\");\n                summaryData = body.summaryData;\n            } else {\n                // Tentativa de fallback: carregar cache de upload-csv\n                try {\n                    const cachePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"temp\", \"last_processed.json\");\n                    if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(cachePath)) {\n                        console.log(\"Carregando processedData do cache local (last_processed.json)\");\n                        const cached = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(cachePath, \"utf8\"));\n                        if (cached && cached.transactions) {\n                            body.processedData = cached; // reter em memória local\n                            console.log(\"Reinvocando processamento com cache\");\n                            // Forçar pequena recursão lógica manual: duplicar bloco sem recursão HTTP\n                            const realData = cached;\n                            const branchMap = new Map();\n                            const allTransactions = [];\n                            try {\n                                realData.transactions.forEach((transaction, index)=>{\n                                    try {\n                                        console.log(`[EXPORT][CACHE] Processando transação ${index}:`, {\n                                            vencimento: transaction.vencimento,\n                                            transacionador: transaction.transacionador,\n                                            valorNumerico: transaction.valorNumerico\n                                        });\n                                        if (!transaction) return;\n                                        const branch = transaction.filial || realData.branchTotals?.[0]?.branch || \"FILIAL PRINCIPAL\";\n                                        const sourceFile = transaction.sourceFile || `${branch}.csv`;\n                                        if (!branchMap.has(branch)) branchMap.set(branch, {\n                                            totalAPagar: 0,\n                                            totalAReceber: 0\n                                        });\n                                        const branchData = branchMap.get(branch);\n                                        const valorNumerico = transaction.valorNumerico || 0;\n                                        const documentType = transaction.documentType === \"A_RECEBER\" ? \"A_RECEBER\" : \"A_PAGAR\";\n                                        const parsedDate = parsePtBrDate(transaction.vencimento);\n                                        if (isNaN(parsedDate.getTime())) {\n                                            console.warn(\"[EXPORT][CACHE] Ignorando transa\\xe7\\xe3o com data inv\\xe1lida:\", transaction.vencimento);\n                                            return;\n                                        }\n                                        if (typeof valorNumerico !== \"number\" || isNaN(Number(valorNumerico))) {\n                                            console.warn(\"[EXPORT][CACHE] Ignorando transa\\xe7\\xe3o com valor inv\\xe1lido:\", valorNumerico);\n                                            return;\n                                        }\n                                        if (documentType === \"A_PAGAR\") branchData.totalAPagar += Math.abs(valorNumerico);\n                                        else branchData.totalAReceber += Math.abs(valorNumerico);\n                                        allTransactions.push({\n                                            id: `real_${index}`,\n                                            branch: branch,\n                                            invoiceNumber: transaction.documento || `DOC-${index}`,\n                                            date: parsedDate,\n                                            value: transaction.valor || `R$ 0,00`,\n                                            supplier: transaction.transacionador || \"FORNECEDOR N\\xc3O IDENTIFICADO\",\n                                            documentType: documentType,\n                                            sourceFile: sourceFile,\n                                            valueNumeric: Math.abs(valorNumerico)\n                                        });\n                                    } catch (transactionErr) {\n                                        console.error(`[EXPORT][CACHE] Erro ao processar transação ${index}:`, transactionErr);\n                                    }\n                                });\n                            } catch (transactionsErr) {\n                                console.error(\"[EXPORT][CACHE] Erro ao processar transa\\xe7\\xf5es do cache:\", transactionsErr);\n                            }\n                            const branches = Array.from(branchMap.entries()).map(([name, totals])=>({\n                                    name,\n                                    totalAPagar: totals.totalAPagar,\n                                    totalAReceber: totals.totalAReceber,\n                                    total: totals.totalAPagar + totals.totalAReceber\n                                }));\n                            summaryData = {\n                                branches,\n                                dateSpecificTotals: [],\n                                grandTotal: branches.reduce((sum, b)=>sum + b.total, 0),\n                                grandTotalAPagar: branches.reduce((sum, b)=>sum + b.totalAPagar, 0),\n                                grandTotalAReceber: branches.reduce((sum, b)=>sum + b.totalAReceber, 0)\n                            };\n                            allInvoices = allTransactions;\n                            allBranchSummaries = branches.map((branch)=>({\n                                    branch: branch.name,\n                                    invoiceCount: allTransactions.filter((inv)=>inv.branch === branch.name).length,\n                                    totalValue: branch.total.toLocaleString(\"pt-BR\", {\n                                        style: \"currency\",\n                                        currency: \"BRL\"\n                                    })\n                                }));\n                        }\n                    }\n                } catch (cacheErr) {\n                    console.warn(\"Falha ao carregar cache de processedData:\", cacheErr);\n                }\n            }\n            if (body.allInvoices) {\n                allInvoices = body.allInvoices;\n            }\n            if (body.allBranchSummaries) {\n                allBranchSummaries = body.allBranchSummaries;\n            }\n        }\n        // Se não temos dados, usar dados hardcoded para demonstração\n        if (!summaryData || !summaryData.branches || summaryData.branches.length === 0) {\n            console.log(\"Usando dados hardcoded para demonstra\\xe7\\xe3o\");\n            summaryData = {\n                branches: [\n                    {\n                        name: \"GO SEEDS\",\n                        totalAPagar: 1912040.00,\n                        totalAReceber: 3175990.36,\n                        total: 5087030.36\n                    },\n                    {\n                        name: \"BEIJA FLOR\",\n                        totalAPagar: 129763.24,\n                        totalAReceber: 0.00,\n                        total: 129763.24\n                    },\n                    {\n                        name: \"SAGUIA\",\n                        totalAPagar: 138251.10,\n                        totalAReceber: 0.00,\n                        total: 138251.10\n                    },\n                    {\n                        name: \"ULTRA SEEDS\",\n                        totalAPagar: 80.96,\n                        totalAReceber: 0.00,\n                        total: 80.96\n                    }\n                ],\n                dateSpecificTotals: [\n                    {\n                        day: \"15/09/2024\",\n                        total: 500000.00\n                    },\n                    {\n                        day: \"16/09/2024\",\n                        total: 750000.00\n                    },\n                    {\n                        day: \"17/09/2024\",\n                        total: 950000.00\n                    }\n                ],\n                grandTotal: 5355135.66,\n                grandTotalAPagar: 2180135.30,\n                grandTotalAReceber: 3175000.36\n            };\n            // Gerar dados de invoices simulados baseados no summaryData\n            allInvoices = generateSimulatedInvoices(summaryData);\n            allBranchSummaries = summaryData.branches.map((branch)=>({\n                    branch: branch.name,\n                    invoiceCount: Math.floor(Math.random() * 10) + 5,\n                    totalValue: branch.total.toLocaleString(\"pt-BR\", {\n                        style: \"currency\",\n                        currency: \"BRL\"\n                    })\n                }));\n        }\n        // Calcular período real baseado nas datas dos documentos\n        let actualStartDate;\n        let actualEndDate;\n        if (allInvoices.length > 0) {\n            const invoiceDates = allInvoices.map((inv)=>new Date(inv.date)).sort((a, b)=>a.getTime() - b.getTime());\n            actualStartDate = invoiceDates[0];\n            actualEndDate = invoiceDates[invoiceDates.length - 1];\n        } else {\n            actualStartDate = new Date();\n            actualEndDate = new Date();\n        }\n        // Log estatístico para debug multi-file\n        const distinctFiles = Array.from(new Set(allInvoices.map((i)=>i.sourceFile)));\n        const distinctBranches = Array.from(new Set(allInvoices.map((i)=>i.branch)));\n        console.log(\"[EXPORT] Estat\\xedsticas:\", {\n            totalInvoices: allInvoices.length,\n            distinctFiles: distinctFiles.length,\n            files: distinctFiles,\n            distinctBranches: distinctBranches.length,\n            branches: distinctBranches\n        });\n        // Criar workbook\n        const workbook = new (exceljs__WEBPACK_IMPORTED_MODULE_0___default().Workbook)();\n        console.log(\"Criando aba de Resumo Geral...\");\n        await createAdvancedSummaryWorksheet(workbook, summaryData, allInvoices, reportName || \"Relat\\xf3rio de Notas Fiscais\", actualStartDate, actualEndDate);\n        console.log(\"Criando abas individuais por filial...\");\n        const existingWorksheetNames = new Set();\n        existingWorksheetNames.add(\"RESUMO GERAL\"); // Adicionar o nome da aba de resumo\n        for (const branch of summaryData.branches){\n            const branchInvoices = allInvoices.filter((inv)=>inv.branch === branch.name);\n            await createAdvancedBranchWorksheet(workbook, branch, branchInvoices, existingWorksheetNames);\n        }\n        // Configurar resposta HTTP\n        const fileName = `relatorio_detalhado_${new Date().toISOString().split(\"T\")[0]}.xlsx`;\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        res.setHeader(\"Content-Disposition\", `attachment; filename=\"${fileName}\"`);\n        // Escrever workbook na resposta\n        await workbook.xlsx.write(res);\n        console.log(\"Excel gerado com sucesso!\");\n        res.end();\n    } catch (error) {\n        console.error(\"Erro na gera\\xe7\\xe3o do Excel:\", error);\n        console.error(\"Stack trace:\", error instanceof Error ? error.stack : \"N\\xe3o dispon\\xedvel\");\n        console.error(\"Tipo de erro:\", typeof error);\n        console.error(\"Estado do req.body:\", {\n            exists: !!req.body,\n            hasProcessedData: !!req.body?.processedData,\n            processedDataType: typeof req.body?.processedData\n        });\n        if (!res.headersSent) {\n            res.status(500).json({\n                success: false,\n                message: \"Erro interno do servidor: \" + (error instanceof Error ? error.message : \"Erro desconhecido\"),\n                errorDetails: error instanceof Error ? {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack?.substring(0, 500) // Primeiros 500 chars do stack\n                } : \"Erro n\\xe3o identificado\"\n            });\n        }\n    }\n}\n// Função para gerar dados de invoices simulados\nfunction generateSimulatedInvoices(summaryData) {\n    const invoices = [];\n    let idCounter = 1;\n    summaryData.branches.forEach((branch)=>{\n        // Gerar algumas invoices A_PAGAR\n        if (branch.totalAPagar > 0) {\n            const numInvoicesAPagar = Math.floor(Math.random() * 5) + 2;\n            const averageValue = branch.totalAPagar / numInvoicesAPagar;\n            for(let i = 0; i < numInvoicesAPagar; i++){\n                const value = averageValue * (0.8 + Math.random() * 0.4); // Variação de ±20%\n                const date = new Date();\n                date.setDate(date.getDate() + Math.floor(Math.random() * 30)); // Próximos 30 dias\n                invoices.push({\n                    id: `inv_${idCounter++}`,\n                    branch: branch.name,\n                    invoiceNumber: `NF-${String(i + 1).padStart(3, \"0\")}`,\n                    date: date,\n                    value: value.toLocaleString(\"pt-BR\", {\n                        style: \"currency\",\n                        currency: \"BRL\"\n                    }),\n                    supplier: `FORNECEDOR ${String.fromCharCode(65 + i)}`,\n                    documentType: \"A_PAGAR\",\n                    sourceFile: `${branch.name}.csv`,\n                    valueNumeric: value\n                });\n            }\n        }\n        // Gerar algumas invoices A_RECEBER\n        if (branch.totalAReceber > 0) {\n            const numInvoicesAReceber = Math.floor(Math.random() * 3) + 1;\n            const averageValue = branch.totalAReceber / numInvoicesAReceber;\n            for(let i = 0; i < numInvoicesAReceber; i++){\n                const value = averageValue * (0.8 + Math.random() * 0.4);\n                const date = new Date();\n                date.setDate(date.getDate() + Math.floor(Math.random() * 30));\n                invoices.push({\n                    id: `inv_${idCounter++}`,\n                    branch: branch.name,\n                    invoiceNumber: `REC-${String(i + 1).padStart(3, \"0\")}`,\n                    date: date,\n                    value: value.toLocaleString(\"pt-BR\", {\n                        style: \"currency\",\n                        currency: \"BRL\"\n                    }),\n                    supplier: `CLIENTE ${String.fromCharCode(65 + i)}`,\n                    documentType: \"A_RECEBER\",\n                    sourceFile: `${branch.name}.csv`,\n                    valueNumeric: value\n                });\n            }\n        }\n    });\n    return invoices;\n}\n// Função para criar a aba de resumo geral avançada\nasync function createAdvancedSummaryWorksheet(workbook, summaryData, allInvoices, reportName, actualStartDate, actualEndDate) {\n    const summarySheet = workbook.addWorksheet(\"Resumo Geral\");\n    let summaryCurrentRow = 1;\n    // Header do relatório\n    summarySheet.addRow([\n        reportName\n    ]);\n    summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n    summarySheet.getCell(`A${summaryCurrentRow}`).style = titleStyle;\n    summarySheet.getRow(summaryCurrentRow).height = 35;\n    summaryCurrentRow++;\n    // Período\n    const periodText = `PERÍODO: ${actualStartDate.toLocaleDateString(\"pt-BR\")} - ${actualEndDate.toLocaleDateString(\"pt-BR\")}`;\n    summarySheet.addRow([\n        periodText\n    ]);\n    summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n    summarySheet.getCell(`A${summaryCurrentRow}`).style = {\n        font: {\n            bold: true,\n            size: 12\n        },\n        fill: {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"E7E6E6\"\n            }\n        },\n        alignment: {\n            horizontal: \"center\",\n            vertical: \"middle\"\n        }\n    };\n    summaryCurrentRow++;\n    // Linha vazia\n    summarySheet.addRow([]);\n    summaryCurrentRow++;\n    // Headers das colunas\n    summarySheet.addRow([\n        \"Vencimento\",\n        \"Transacionador\",\n        \"Documento\",\n        \"Valor\"\n    ]);\n    summarySheet.getRow(summaryCurrentRow).eachCell((cell)=>{\n        cell.style = headerStyle;\n    });\n    summaryCurrentRow++;\n    // Agrupar invoices por arquivo fonte e tipo de documento\n    const invoicesByFileAndType = new Map();\n    for (const invoice of allInvoices){\n        const sourceFile = invoice.sourceFile || \"Unknown\";\n        if (!invoicesByFileAndType.has(sourceFile)) {\n            invoicesByFileAndType.set(sourceFile, {\n                A_PAGAR: [],\n                A_RECEBER: []\n            });\n        }\n        const fileTypes = invoicesByFileAndType.get(sourceFile);\n        const docType = invoice.documentType || \"A_PAGAR\";\n        fileTypes[docType].push(invoice);\n    }\n    // Processar cada arquivo e tipo de documento\n    for (const [fileName, fileTypes] of Array.from(invoicesByFileAndType)){\n        for (const [docType, fileInvoices] of Object.entries(fileTypes)){\n            if (fileInvoices.length === 0) continue;\n            const typeLabel = docType === \"A_PAGAR\" ? \"CONTAS A PAGAR\" : \"CONTAS A RECEBER\";\n            const cleanFileName = fileName.replace(/\\.(csv|CSV)$/, \"\");\n            // Header da categoria\n            summarySheet.addRow([\n                `${typeLabel} - ${cleanFileName}`,\n                \"\",\n                \"\",\n                \"\"\n            ]);\n            summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n            summarySheet.getCell(`A${summaryCurrentRow}`).style = subHeaderStyle;\n            summaryCurrentRow++;\n            // Ordenar por data\n            fileInvoices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n            // Adicionar transações com totais diários\n            let currentDate = \"\";\n            let dailyTotal = 0;\n            for (const invoice of fileInvoices){\n                const invoiceDate = new Date(invoice.date).toLocaleDateString(\"pt-BR\");\n                const invoiceValue = invoice.valueNumeric;\n                // Verificar mudança de data para total diário\n                if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n                    summarySheet.addRow([\n                        \"\",\n                        \"\",\n                        \"TOTAL\",\n                        dailyTotal\n                    ]);\n                    const totalRow = summarySheet.getRow(summaryCurrentRow);\n                    totalRow.eachCell((cell, colNumber)=>{\n                        cell.style = {\n                            font: {\n                                bold: true\n                            },\n                            fill: {\n                                type: \"pattern\",\n                                pattern: \"solid\",\n                                fgColor: {\n                                    argb: \"F2F2F2\"\n                                }\n                            },\n                            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                            border: cellStyle.border,\n                            alignment: colNumber === 3 ? {\n                                horizontal: \"center\"\n                            } : undefined\n                        };\n                    });\n                    summaryCurrentRow++;\n                    dailyTotal = 0;\n                }\n                // Adicionar linha da transação\n                summarySheet.addRow([\n                    invoiceDate,\n                    invoice.supplier || \"FORNECEDOR N\\xc3O IDENTIFICADO\",\n                    invoice.invoiceNumber,\n                    invoiceValue\n                ]);\n                const row = summarySheet.getRow(summaryCurrentRow);\n                row.eachCell((cell, colNumber)=>{\n                    cell.style = cellStyle;\n                    if (colNumber === 4) {\n                        cell.numFmt = \"R$ #,##0.00\";\n                    }\n                });\n                currentDate = invoiceDate;\n                dailyTotal += invoiceValue;\n                summaryCurrentRow++;\n            }\n            // Total final da categoria se houver dados pendentes\n            if (dailyTotal > 0) {\n                summarySheet.addRow([\n                    \"\",\n                    \"\",\n                    \"TOTAL\",\n                    dailyTotal\n                ]);\n                const totalRow = summarySheet.getRow(summaryCurrentRow);\n                totalRow.eachCell((cell, colNumber)=>{\n                    cell.style = {\n                        font: {\n                            bold: true\n                        },\n                        fill: {\n                            type: \"pattern\",\n                            pattern: \"solid\",\n                            fgColor: {\n                                argb: \"F2F2F2\"\n                            }\n                        },\n                        numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                        border: cellStyle.border,\n                        alignment: colNumber === 3 ? {\n                            horizontal: \"center\"\n                        } : undefined\n                    };\n                });\n                summaryCurrentRow++;\n            }\n            // Total da categoria\n            const categoryTotal = fileInvoices.reduce((sum, inv)=>sum + inv.valueNumeric, 0);\n            summarySheet.addRow([\n                \"\",\n                \"\",\n                `TOTAL ${typeLabel}`,\n                categoryTotal\n            ]);\n            const categoryTotalRow = summarySheet.getRow(summaryCurrentRow);\n            categoryTotalRow.eachCell((cell, colNumber)=>{\n                cell.style = {\n                    ...totalRowStyle,\n                    numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                    border: cellStyle.border\n                };\n            });\n            summaryCurrentRow++;\n            // Linha vazia para separação\n            summarySheet.addRow([]);\n            summaryCurrentRow++;\n        }\n    }\n    // Total geral final\n    summarySheet.addRow([\n        \"\",\n        \"\",\n        \"TOTAL GERAL\",\n        summaryData.grandTotal\n    ]);\n    const grandTotalRow = summarySheet.getRow(summaryCurrentRow);\n    grandTotalRow.eachCell((cell, colNumber)=>{\n        cell.style = {\n            ...totalRowStyle,\n            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n            border: cellStyle.border,\n            font: {\n                bold: true,\n                size: 14,\n                color: {\n                    argb: \"FFFFFF\"\n                }\n            }\n        };\n    });\n    // Definir larguras das colunas\n    summarySheet.getColumn(1).width = 15; // Data\n    summarySheet.getColumn(2).width = 60; // Transacionador  \n    summarySheet.getColumn(3).width = 20; // Documento\n    summarySheet.getColumn(4).width = 18; // Valor\n}\n// Função para criar aba individual da filial avançada\n// Função para gerar nomes únicos de worksheet\nfunction generateUniqueWorksheetName(baseName, existingNames) {\n    // Limpar caracteres inválidos e limitar tamanho\n    let cleanName = baseName.replace(/[\\/\\\\\\?\\*\\[\\]]/g, \"_\").replace(/[^a-zA-Z0-9_\\-\\s]/g, \"\").substring(0, 25).trim();\n    // Se o nome estiver vazio após limpeza, usar um padrão\n    if (!cleanName) {\n        cleanName = \"PLANILHA\";\n    }\n    // Se o nome não existe, usar como está\n    if (!existingNames.has(cleanName)) {\n        existingNames.add(cleanName);\n        return cleanName;\n    }\n    // Se existe, adicionar número sequencial\n    let counter = 1;\n    let uniqueName = `${cleanName.substring(0, 22)}_${counter}`;\n    while(existingNames.has(uniqueName)){\n        counter++;\n        uniqueName = `${cleanName.substring(0, 22)}_${counter}`;\n    }\n    existingNames.add(uniqueName);\n    return uniqueName;\n}\nasync function createAdvancedBranchWorksheet(workbook, branch, branchInvoices, existingNames) {\n    const uniqueName = generateUniqueWorksheetName(branch.name, existingNames);\n    const worksheet = workbook.addWorksheet(uniqueName);\n    let currentRow = 1;\n    // Título da filial\n    const titleRow = worksheet.addRow([\n        `DETALHAMENTO - ${branch.name}`\n    ]);\n    worksheet.mergeCells(`A${currentRow}:D${currentRow}`);\n    titleRow.getCell(1).style = titleStyle;\n    titleRow.height = 30;\n    currentRow++;\n    // Período\n    if (branchInvoices.length > 0) {\n        const branchDates = branchInvoices.map((inv)=>new Date(inv.date)).sort((a, b)=>a.getTime() - b.getTime());\n        const startDate = branchDates[0];\n        const endDate = branchDates[branchDates.length - 1];\n        const periodText = `PERÍODO: ${startDate.toLocaleDateString(\"pt-BR\")} - ${endDate.toLocaleDateString(\"pt-BR\")}`;\n        worksheet.addRow([\n            periodText\n        ]);\n        worksheet.mergeCells(`A${currentRow}:D${currentRow}`);\n        worksheet.getCell(`A${currentRow}`).style = {\n            font: {\n                bold: true,\n                size: 12\n            },\n            fill: {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: {\n                    argb: \"E7E6E6\"\n                }\n            },\n            alignment: {\n                horizontal: \"center\",\n                vertical: \"middle\"\n            }\n        };\n        currentRow++;\n    }\n    // Detalhamento de transações por tipo\n    if (branchInvoices.length > 0) {\n        // Separar por tipo de documento\n        const apagarInvoices = branchInvoices.filter((inv)=>inv.documentType === \"A_PAGAR\");\n        const areceberInvoices = branchInvoices.filter((inv)=>inv.documentType === \"A_RECEBER\");\n        // Processar A_PAGAR\n        if (apagarInvoices.length > 0) {\n            const aPagarHeaderRow = worksheet.addRow([\n                \"CONTAS A PAGAR\"\n            ]);\n            worksheet.mergeCells(`A${currentRow}:D${currentRow}`);\n            aPagarHeaderRow.getCell(1).style = subHeaderStyle;\n            currentRow++;\n            worksheet.addRow([]);\n            currentRow++;\n            // Cabeçalhos das transações A_PAGAR\n            const transHeaderRow = worksheet.addRow([\n                \"Vencimento\",\n                \"Transacionador\",\n                \"Documento\",\n                \"Valor\"\n            ]);\n            transHeaderRow.eachCell((cell)=>{\n                cell.style = headerStyle;\n            });\n            currentRow++;\n            // Ordenar por data e adicionar transações\n            apagarInvoices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n            let currentDate = \"\";\n            let dailyTotal = 0;\n            apagarInvoices.forEach((invoice)=>{\n                const invoiceDate = new Date(invoice.date).toLocaleDateString(\"pt-BR\");\n                // Verificar mudança de data para total diário\n                if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n                    worksheet.addRow([\n                        \"\",\n                        \"\",\n                        \"TOTAL\",\n                        dailyTotal\n                    ]);\n                    const totalRow = worksheet.getRow(currentRow);\n                    totalRow.eachCell((cell, colNumber)=>{\n                        cell.style = {\n                            font: {\n                                bold: true\n                            },\n                            fill: {\n                                type: \"pattern\",\n                                pattern: \"solid\",\n                                fgColor: {\n                                    argb: \"F2F2F2\"\n                                }\n                            },\n                            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                            border: cellStyle.border,\n                            alignment: colNumber === 3 ? {\n                                horizontal: \"center\"\n                            } : undefined\n                        };\n                    });\n                    currentRow++;\n                    dailyTotal = 0;\n                }\n                worksheet.addRow([\n                    invoiceDate,\n                    invoice.supplier,\n                    invoice.invoiceNumber,\n                    invoice.valueNumeric\n                ]);\n                const row = worksheet.getRow(currentRow);\n                row.eachCell((cell, colNumber)=>{\n                    cell.style = cellStyle;\n                    if (colNumber === 4) {\n                        cell.numFmt = \"R$ #,##0.00\";\n                    }\n                });\n                currentDate = invoiceDate;\n                dailyTotal += invoice.valueNumeric;\n                currentRow++;\n            });\n            // Total final A_PAGAR\n            if (dailyTotal > 0) {\n                worksheet.addRow([\n                    \"\",\n                    \"\",\n                    \"TOTAL\",\n                    dailyTotal\n                ]);\n                const totalRow = worksheet.getRow(currentRow);\n                totalRow.eachCell((cell, colNumber)=>{\n                    cell.style = {\n                        font: {\n                            bold: true\n                        },\n                        fill: {\n                            type: \"pattern\",\n                            pattern: \"solid\",\n                            fgColor: {\n                                argb: \"F2F2F2\"\n                            }\n                        },\n                        numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                        border: cellStyle.border,\n                        alignment: colNumber === 3 ? {\n                            horizontal: \"center\"\n                        } : undefined\n                    };\n                });\n                currentRow++;\n            }\n            const totalAPagarRow = worksheet.addRow([\n                \"\",\n                \"\",\n                \"TOTAL A PAGAR\",\n                branch.totalAPagar\n            ]);\n            totalAPagarRow.eachCell((cell, colNumber)=>{\n                cell.style = {\n                    ...totalRowStyle,\n                    numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                    border: cellStyle.border\n                };\n            });\n            currentRow++;\n            // Linha vazia\n            worksheet.addRow([]);\n            currentRow++;\n        }\n        // Processar A_RECEBER\n        if (areceberInvoices.length > 0) {\n            const aReceberHeaderRow = worksheet.addRow([\n                \"CONTAS A RECEBER\"\n            ]);\n            worksheet.mergeCells(`A${currentRow}:D${currentRow}`);\n            aReceberHeaderRow.getCell(1).style = subHeaderStyle;\n            currentRow++;\n            worksheet.addRow([]);\n            currentRow++;\n            // Cabeçalhos das transações A_RECEBER\n            const transHeaderRow = worksheet.addRow([\n                \"Vencimento\",\n                \"Cliente\",\n                \"Documento\",\n                \"Valor\"\n            ]);\n            transHeaderRow.eachCell((cell)=>{\n                cell.style = headerStyle;\n            });\n            currentRow++;\n            // Ordenar por data e adicionar transações\n            areceberInvoices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n            let currentDate = \"\";\n            let dailyTotal = 0;\n            areceberInvoices.forEach((invoice)=>{\n                const invoiceDate = new Date(invoice.date).toLocaleDateString(\"pt-BR\");\n                // Verificar mudança de data para total diário\n                if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n                    worksheet.addRow([\n                        \"\",\n                        \"\",\n                        \"TOTAL\",\n                        dailyTotal\n                    ]);\n                    const totalRow = worksheet.getRow(currentRow);\n                    totalRow.eachCell((cell, colNumber)=>{\n                        cell.style = {\n                            font: {\n                                bold: true\n                            },\n                            fill: {\n                                type: \"pattern\",\n                                pattern: \"solid\",\n                                fgColor: {\n                                    argb: \"F2F2F2\"\n                                }\n                            },\n                            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                            border: cellStyle.border,\n                            alignment: colNumber === 3 ? {\n                                horizontal: \"center\"\n                            } : undefined\n                        };\n                    });\n                    currentRow++;\n                    dailyTotal = 0;\n                }\n                worksheet.addRow([\n                    invoiceDate,\n                    invoice.supplier,\n                    invoice.invoiceNumber,\n                    invoice.valueNumeric\n                ]);\n                const row = worksheet.getRow(currentRow);\n                row.eachCell((cell, colNumber)=>{\n                    cell.style = cellStyle;\n                    if (colNumber === 4) {\n                        cell.numFmt = \"R$ #,##0.00\";\n                    }\n                });\n                currentDate = invoiceDate;\n                dailyTotal += invoice.valueNumeric;\n                currentRow++;\n            });\n            // Total final A_RECEBER\n            if (dailyTotal > 0) {\n                worksheet.addRow([\n                    \"\",\n                    \"\",\n                    \"TOTAL\",\n                    dailyTotal\n                ]);\n                const totalRow = worksheet.getRow(currentRow);\n                totalRow.eachCell((cell, colNumber)=>{\n                    cell.style = {\n                        font: {\n                            bold: true\n                        },\n                        fill: {\n                            type: \"pattern\",\n                            pattern: \"solid\",\n                            fgColor: {\n                                argb: \"F2F2F2\"\n                            }\n                        },\n                        numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                        border: cellStyle.border,\n                        alignment: colNumber === 3 ? {\n                            horizontal: \"center\"\n                        } : undefined\n                    };\n                });\n                currentRow++;\n            }\n            const totalAReceberRow = worksheet.addRow([\n                \"\",\n                \"\",\n                \"TOTAL A RECEBER\",\n                branch.totalAReceber\n            ]);\n            totalAReceberRow.eachCell((cell, colNumber)=>{\n                cell.style = {\n                    ...totalRowStyle,\n                    numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                    border: cellStyle.border\n                };\n            });\n            currentRow++;\n        }\n    } else {\n        // Mensagem quando não há transações detalhadas\n        const noDataRow = worksheet.addRow([\n            \"TRANSA\\xc7\\xd5ES DETALHADAS\"\n        ]);\n        worksheet.mergeCells(`A${currentRow}:D${currentRow}`);\n        noDataRow.getCell(1).style = subHeaderStyle;\n        currentRow++;\n        worksheet.addRow([]);\n        currentRow++;\n        worksheet.addRow([\n            \"Dados detalhados das transa\\xe7\\xf5es ser\\xe3o exibidos aqui quando dispon\\xedveis.\"\n        ]);\n        worksheet.addRow([\n            \"Para obter detalhes, fa\\xe7a upload dos arquivos CSV individuais.\"\n        ]);\n    }\n    // Ajustar largura das colunas\n    worksheet.columns = [\n        {\n            width: 15\n        },\n        {\n            width: 40\n        },\n        {\n            width: 20\n        },\n        {\n            width: 18\n        } // Valor\n    ];\n}\n// Função para criar a aba de resumo geral\nasync function createResumoGeralWorksheet(workbook, summaryData) {\n    const worksheet = workbook.addWorksheet(\"Resumo Geral\");\n    // Título principal\n    const titleRow = worksheet.addRow([\n        \"RESUMO GERAL - SALDO L\\xcdQUIDO POR FILIAL\"\n    ]);\n    worksheet.mergeCells(\"A1:D1\");\n    titleRow.getCell(1).fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FF4472C4\"\n        }\n    };\n    titleRow.getCell(1).font = {\n        bold: true,\n        color: {\n            argb: \"FFFFFFFF\"\n        },\n        size: 16\n    };\n    titleRow.getCell(1).alignment = {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    };\n    titleRow.height = 30;\n    worksheet.addRow([]); // Linha vazia\n    // Cabeçalhos\n    const headerRow = worksheet.addRow([\n        \"FILIAL\",\n        \"TOTAL A PAGAR\",\n        \"TOTAL A RECEBER\",\n        \"SALDO L\\xcdQUIDO\"\n    ]);\n    headerRow.font = {\n        bold: true,\n        color: {\n            argb: \"FFFFFFFF\"\n        }\n    };\n    headerRow.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FF4472C4\"\n        }\n    };\n    headerRow.alignment = {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    };\n    // Dados das filiais\n    summaryData.branches.forEach((branch)=>{\n        const saldoLiquido = branch.totalAReceber - branch.totalAPagar;\n        const row = worksheet.addRow([\n            branch.name,\n            `R$ ${branch.totalAPagar.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`,\n            `R$ ${branch.totalAReceber.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`,\n            `R$ ${saldoLiquido.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`\n        ]);\n        // Colorir saldo líquido conforme valor\n        const saldoCell = row.getCell(4);\n        if (saldoLiquido > 0) {\n            saldoCell.font = {\n                color: {\n                    argb: \"FF008000\"\n                },\n                bold: true\n            }; // Verde\n        } else if (saldoLiquido < 0) {\n            saldoCell.font = {\n                color: {\n                    argb: \"FFFF0000\"\n                },\n                bold: true\n            }; // Vermelho\n        }\n    });\n    // Linha de total geral\n    worksheet.addRow([]); // Linha vazia\n    const totalRow = worksheet.addRow([\n        \"TOTAL GERAL\",\n        `R$ ${summaryData.grandTotalAPagar.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`,\n        `R$ ${summaryData.grandTotalAReceber.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`,\n        `R$ ${(summaryData.grandTotalAReceber - summaryData.grandTotalAPagar).toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    totalRow.font = {\n        bold: true,\n        size: 12\n    };\n    totalRow.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FFE0E0E0\"\n        }\n    };\n    // Ajustar largura das colunas\n    worksheet.columns = [\n        {\n            width: 20\n        },\n        {\n            width: 18\n        },\n        {\n            width: 18\n        },\n        {\n            width: 18\n        } // Saldo Líquido\n    ];\n    // Adicionar bordas\n    const dataRange = worksheet.getRows(3, worksheet.rowCount - 2);\n    dataRange?.forEach((row)=>{\n        row.eachCell((cell)=>{\n            cell.border = {\n                top: {\n                    style: \"thin\"\n                },\n                left: {\n                    style: \"thin\"\n                },\n                bottom: {\n                    style: \"thin\"\n                },\n                right: {\n                    style: \"thin\"\n                }\n            };\n        });\n    });\n}\n// Função para criar aba individual da filial\nasync function createBranchWorksheet(workbook, branch, processedData) {\n    const worksheet = workbook.addWorksheet(branch.name);\n    // Título da filial\n    const titleRow = worksheet.addRow([\n        `DETALHAMENTO - ${branch.name}`\n    ]);\n    worksheet.mergeCells(\"A1:D1\");\n    titleRow.getCell(1).fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FF4472C4\"\n        }\n    };\n    titleRow.getCell(1).font = {\n        bold: true,\n        color: {\n            argb: \"FFFFFFFF\"\n        },\n        size: 14\n    };\n    titleRow.getCell(1).alignment = {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    };\n    titleRow.height = 25;\n    worksheet.addRow([]); // Linha vazia\n    // Detalhamento de transações (se disponível)\n    if (processedData && processedData.transactions.length > 0) {\n        const transactionsHeaderRow = worksheet.addRow([\n            \"DETALHAMENTO DE TRANSA\\xc7\\xd5ES\"\n        ]);\n        worksheet.mergeCells(`A${worksheet.rowCount}:D${worksheet.rowCount}`);\n        transactionsHeaderRow.getCell(1).font = {\n            bold: true,\n            size: 12\n        };\n        transactionsHeaderRow.getCell(1).fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"FFE0E0E0\"\n            }\n        };\n        transactionsHeaderRow.getCell(1).alignment = {\n            horizontal: \"center\"\n        };\n        worksheet.addRow([]); // Linha vazia\n        // Cabeçalhos das transações\n        const transHeaderRow = worksheet.addRow([\n            \"Vencimento\",\n            \"Transacionador\",\n            \"Documento\",\n            \"Valor\",\n            \"Tipo\"\n        ]);\n        transHeaderRow.font = {\n            bold: true,\n            color: {\n                argb: \"FFFFFFFF\"\n            }\n        };\n        transHeaderRow.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"FF4472C4\"\n            }\n        };\n        // Dados das transações\n        processedData.transactions.forEach((transaction)=>{\n            const tipo = transaction.valorNumerico > 0 ? \"A Pagar\" : \"A Receber\";\n            worksheet.addRow([\n                transaction.vencimento,\n                transaction.transacionador,\n                transaction.documento,\n                transaction.valor,\n                tipo\n            ]);\n        });\n    } else {\n        // Mensagem quando não há transações detalhadas\n        const noDataRow = worksheet.addRow([\n            \"TRANSA\\xc7\\xd5ES DETALHADAS\"\n        ]);\n        worksheet.mergeCells(`A${worksheet.rowCount}:D${worksheet.rowCount}`);\n        noDataRow.getCell(1).font = {\n            bold: true,\n            size: 12\n        };\n        noDataRow.getCell(1).fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"FFE0E0E0\"\n            }\n        };\n        noDataRow.getCell(1).alignment = {\n            horizontal: \"center\"\n        };\n        worksheet.addRow([]); // Linha vazia\n        worksheet.addRow([\n            \"Dados detalhados das transa\\xe7\\xf5es ser\\xe3o exibidos aqui quando dispon\\xedveis.\"\n        ]);\n        worksheet.addRow([\n            \"Para obter detalhes, fa\\xe7a upload dos arquivos CSV individuais.\"\n        ]);\n    }\n    // Ajustar largura das colunas\n    worksheet.columns = [\n        {\n            width: 15\n        },\n        {\n            width: 25\n        },\n        {\n            width: 15\n        },\n        {\n            width: 18\n        },\n        {\n            width: 12\n        } // Tipo\n    ];\n    // Adicionar bordas nas células importantes\n    const allRows = worksheet.getRows(1, worksheet.rowCount);\n    allRows?.forEach((row)=>{\n        row.eachCell((cell)=>{\n            if (cell.value) {\n                cell.border = {\n                    top: {\n                        style: \"thin\"\n                    },\n                    left: {\n                        style: \"thin\"\n                    },\n                    bottom: {\n                        style: \"thin\"\n                    },\n                    right: {\n                        style: \"thin\"\n                    }\n                };\n            }\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/export-excel.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/export-excel";
exports.ids = ["pages/api/export-excel"];
exports.modules = {

/***/ "exceljs":
/*!**************************!*\
  !*** external "exceljs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("exceljs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\export-excel.ts */ \"(api)/./pages/api/export-excel.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/export-excel\",\n        pathname: \"/api/export-excel\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_export_excel_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV4cG9ydC1leGNlbCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZXhwb3J0LWV4Y2VsLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzBEO0FBQzFEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx1REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsdURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm90YWZsZXgtbmV4dGpzLz9kNGZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcZXhwb3J0LWV4Y2VsLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZXhwb3J0LWV4Y2VsXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZXhwb3J0LWV4Y2VsXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/export-excel.ts":
/*!***********************************!*\
  !*** ./pages/api/export-excel.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var exceljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! exceljs */ \"exceljs\");\n/* harmony import */ var exceljs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(exceljs__WEBPACK_IMPORTED_MODULE_0__);\n\n// Estilos Excel obrigat√≥rios\nconst headerStyle = {\n    font: {\n        bold: true,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"2F5597\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    },\n    border: {\n        top: {\n            style: \"thin\"\n        },\n        left: {\n            style: \"thin\"\n        },\n        bottom: {\n            style: \"thin\"\n        },\n        right: {\n            style: \"thin\"\n        }\n    }\n};\nconst cellStyle = {\n    border: {\n        top: {\n            style: \"thin\"\n        },\n        left: {\n            style: \"thin\"\n        },\n        bottom: {\n            style: \"thin\"\n        },\n        right: {\n            style: \"thin\"\n        }\n    }\n};\nconst titleStyle = {\n    font: {\n        bold: true,\n        size: 16,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"2F5597\"\n        }\n    }\n};\nconst subHeaderStyle = {\n    font: {\n        bold: true,\n        size: 14,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"1F4E79\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    }\n};\nconst totalRowStyle = {\n    font: {\n        bold: true,\n        color: {\n            argb: \"FFFFFF\"\n        }\n    },\n    fill: {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"366092\"\n        }\n    },\n    alignment: {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    }\n};\nasync function handler(req, res) {\n    console.log(\"Iniciando gera\\xe7\\xe3o do Excel...\");\n    console.log(\"Method:\", req.method);\n    try {\n        // Extrair informa√ß√µes do relat√≥rio\n        const { name: reportName, startDate, endDate, categories } = req.body || {};\n        let summaryData = null;\n        let allInvoices = [];\n        let allBranchSummaries = [];\n        // Verificar se existe dados de resumo em sess√£o/cache ou usar dados hardcoded\n        if (req.method === \"POST\" && req.body) {\n            console.log(\"Dados recebidos no body:\", req.body);\n            if (req.body.summaryData) {\n                summaryData = req.body.summaryData;\n            }\n            if (req.body.allInvoices) {\n                allInvoices = req.body.allInvoices;\n            }\n            if (req.body.allBranchSummaries) {\n                allBranchSummaries = req.body.allBranchSummaries;\n            }\n        }\n        // Se n√£o temos dados, usar dados hardcoded para demonstra√ß√£o\n        if (!summaryData || summaryData.branches.length === 0) {\n            console.log(\"Usando dados hardcoded para demonstra\\xe7\\xe3o\");\n            summaryData = {\n                branches: [\n                    {\n                        name: \"GO SEEDS\",\n                        totalAPagar: 1912040.00,\n                        totalAReceber: 3175990.36,\n                        total: 5087030.36\n                    },\n                    {\n                        name: \"BEIJA FLOR\",\n                        totalAPagar: 129763.24,\n                        totalAReceber: 0.00,\n                        total: 129763.24\n                    },\n                    {\n                        name: \"SAGUIA\",\n                        totalAPagar: 138251.10,\n                        totalAReceber: 0.00,\n                        total: 138251.10\n                    },\n                    {\n                        name: \"ULTRA SEEDS\",\n                        totalAPagar: 80.96,\n                        totalAReceber: 0.00,\n                        total: 80.96\n                    }\n                ],\n                dateSpecificTotals: [\n                    {\n                        day: \"15/09/2024\",\n                        total: 500000.00\n                    },\n                    {\n                        day: \"16/09/2024\",\n                        total: 750000.00\n                    },\n                    {\n                        day: \"17/09/2024\",\n                        total: 950000.00\n                    }\n                ],\n                grandTotal: 5355135.66,\n                grandTotalAPagar: 2180135.30,\n                grandTotalAReceber: 3175000.36\n            };\n            // Gerar dados de invoices simulados baseados no summaryData\n            allInvoices = generateSimulatedInvoices(summaryData);\n            allBranchSummaries = summaryData.branches.map((branch)=>({\n                    branch: branch.name,\n                    invoiceCount: Math.floor(Math.random() * 10) + 5,\n                    totalValue: branch.total.toLocaleString(\"pt-BR\", {\n                        style: \"currency\",\n                        currency: \"BRL\"\n                    })\n                }));\n        }\n        // Calcular per√≠odo real baseado nas datas dos documentos\n        let actualStartDate;\n        let actualEndDate;\n        if (allInvoices.length > 0) {\n            const invoiceDates = allInvoices.map((inv)=>new Date(inv.date)).sort((a, b)=>a.getTime() - b.getTime());\n            actualStartDate = invoiceDates[0];\n            actualEndDate = invoiceDates[invoiceDates.length - 1];\n        } else {\n            actualStartDate = new Date();\n            actualEndDate = new Date();\n        }\n        // Criar workbook\n        const workbook = new (exceljs__WEBPACK_IMPORTED_MODULE_0___default().Workbook)();\n        console.log(\"Criando aba de Resumo Geral...\");\n        await createAdvancedSummaryWorksheet(workbook, summaryData, allInvoices, reportName || \"Relat\\xf3rio de Notas Fiscais\", actualStartDate, actualEndDate);\n        console.log(\"Criando abas individuais por filial...\");\n        for (const branch of summaryData.branches){\n            const branchInvoices = allInvoices.filter((inv)=>inv.branch === branch.name);\n            await createAdvancedBranchWorksheet(workbook, branch, branchInvoices);\n        }\n        // Configurar resposta HTTP\n        const fileName = `relatorio_detalhado_${new Date().toISOString().split(\"T\")[0]}.xlsx`;\n        res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        res.setHeader(\"Content-Disposition\", `attachment; filename=\"${fileName}\"`);\n        // Escrever workbook na resposta\n        await workbook.xlsx.write(res);\n        console.log(\"Excel gerado com sucesso!\");\n        res.end();\n    } catch (error) {\n        console.error(\"Erro na gera\\xe7\\xe3o do Excel:\", error);\n        if (!res.headersSent) {\n            res.status(500).json({\n                success: false,\n                message: \"Erro interno do servidor: \" + (error instanceof Error ? error.message : \"Erro desconhecido\")\n            });\n        }\n    }\n}\n// Fun√ß√£o para gerar dados de invoices simulados\nfunction generateSimulatedInvoices(summaryData) {\n    const invoices = [];\n    let idCounter = 1;\n    summaryData.branches.forEach((branch)=>{\n        // Gerar algumas invoices A_PAGAR\n        if (branch.totalAPagar > 0) {\n            const numInvoicesAPagar = Math.floor(Math.random() * 5) + 2;\n            const averageValue = branch.totalAPagar / numInvoicesAPagar;\n            for(let i = 0; i < numInvoicesAPagar; i++){\n                const value = averageValue * (0.8 + Math.random() * 0.4); // Varia√ß√£o de ¬±20%\n                const date = new Date();\n                date.setDate(date.getDate() + Math.floor(Math.random() * 30)); // Pr√≥ximos 30 dias\n                invoices.push({\n                    id: `inv_${idCounter++}`,\n                    branch: branch.name,\n                    invoiceNumber: `NF-${String(i + 1).padStart(3, \"0\")}`,\n                    date: date,\n                    value: value.toLocaleString(\"pt-BR\", {\n                        style: \"currency\",\n                        currency: \"BRL\"\n                    }),\n                    supplier: `FORNECEDOR ${String.fromCharCode(65 + i)}`,\n                    documentType: \"A_PAGAR\",\n                    sourceFile: `${branch.name}.csv`,\n                    valueNumeric: value\n                });\n            }\n        }\n        // Gerar algumas invoices A_RECEBER\n        if (branch.totalAReceber > 0) {\n            const numInvoicesAReceber = Math.floor(Math.random() * 3) + 1;\n            const averageValue = branch.totalAReceber / numInvoicesAReceber;\n            for(let i = 0; i < numInvoicesAReceber; i++){\n                const value = averageValue * (0.8 + Math.random() * 0.4);\n                const date = new Date();\n                date.setDate(date.getDate() + Math.floor(Math.random() * 30));\n                invoices.push({\n                    id: `inv_${idCounter++}`,\n                    branch: branch.name,\n                    invoiceNumber: `REC-${String(i + 1).padStart(3, \"0\")}`,\n                    date: date,\n                    value: value.toLocaleString(\"pt-BR\", {\n                        style: \"currency\",\n                        currency: \"BRL\"\n                    }),\n                    supplier: `CLIENTE ${String.fromCharCode(65 + i)}`,\n                    documentType: \"A_RECEBER\",\n                    sourceFile: `${branch.name}.csv`,\n                    valueNumeric: value\n                });\n            }\n        }\n    });\n    return invoices;\n}\n// Fun√ß√£o para criar a aba de resumo geral avan√ßada\nasync function createAdvancedSummaryWorksheet(workbook, summaryData, allInvoices, reportName, actualStartDate, actualEndDate) {\n    const summarySheet = workbook.addWorksheet(\"Resumo Geral\");\n    let summaryCurrentRow = 1;\n    // Header do relat√≥rio\n    summarySheet.addRow([\n        reportName\n    ]);\n    summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n    summarySheet.getCell(`A${summaryCurrentRow}`).style = titleStyle;\n    summarySheet.getRow(summaryCurrentRow).height = 35;\n    summaryCurrentRow++;\n    // Per√≠odo\n    const periodText = `PER√çODO: ${actualStartDate.toLocaleDateString(\"pt-BR\")} - ${actualEndDate.toLocaleDateString(\"pt-BR\")}`;\n    summarySheet.addRow([\n        periodText\n    ]);\n    summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n    summarySheet.getCell(`A${summaryCurrentRow}`).style = {\n        font: {\n            bold: true,\n            size: 12\n        },\n        fill: {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"E7E6E6\"\n            }\n        },\n        alignment: {\n            horizontal: \"center\",\n            vertical: \"middle\"\n        }\n    };\n    summaryCurrentRow++;\n    // Linha vazia\n    summarySheet.addRow([]);\n    summaryCurrentRow++;\n    // Headers das colunas\n    summarySheet.addRow([\n        \"Vencimento\",\n        \"Transacionador\",\n        \"Documento\",\n        \"Valor\"\n    ]);\n    summarySheet.getRow(summaryCurrentRow).eachCell((cell)=>{\n        cell.style = headerStyle;\n    });\n    summaryCurrentRow++;\n    // Agrupar invoices por arquivo fonte e tipo de documento\n    const invoicesByFileAndType = new Map();\n    for (const invoice of allInvoices){\n        const sourceFile = invoice.sourceFile || \"Unknown\";\n        if (!invoicesByFileAndType.has(sourceFile)) {\n            invoicesByFileAndType.set(sourceFile, {\n                A_PAGAR: [],\n                A_RECEBER: []\n            });\n        }\n        const fileTypes = invoicesByFileAndType.get(sourceFile);\n        const docType = invoice.documentType || \"A_PAGAR\";\n        fileTypes[docType].push(invoice);\n    }\n    // Processar cada arquivo e tipo de documento\n    for (const [fileName, fileTypes] of Array.from(invoicesByFileAndType)){\n        for (const [docType, fileInvoices] of Object.entries(fileTypes)){\n            if (fileInvoices.length === 0) continue;\n            const typeLabel = docType === \"A_PAGAR\" ? \"CONTAS A PAGAR\" : \"CONTAS A RECEBER\";\n            const cleanFileName = fileName.replace(/\\.(csv|CSV)$/, \"\");\n            // Header da categoria\n            summarySheet.addRow([\n                `${typeLabel} - ${cleanFileName}`,\n                \"\",\n                \"\",\n                \"\"\n            ]);\n            summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n            summarySheet.getCell(`A${summaryCurrentRow}`).style = subHeaderStyle;\n            summaryCurrentRow++;\n            // Ordenar por data\n            fileInvoices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n            // Adicionar transa√ß√µes com totais di√°rios\n            let currentDate = \"\";\n            let dailyTotal = 0;\n            for (const invoice of fileInvoices){\n                const invoiceDate = new Date(invoice.date).toLocaleDateString(\"pt-BR\");\n                const invoiceValue = invoice.valueNumeric;\n                // Verificar mudan√ßa de data para total di√°rio\n                if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n                    summarySheet.addRow([\n                        \"\",\n                        \"\",\n                        \"TOTAL DI\\xc1RIO\",\n                        dailyTotal\n                    ]);\n                    const totalRow = summarySheet.getRow(summaryCurrentRow);\n                    totalRow.eachCell((cell, colNumber)=>{\n                        cell.style = {\n                            font: {\n                                bold: true\n                            },\n                            fill: {\n                                type: \"pattern\",\n                                pattern: \"solid\",\n                                fgColor: {\n                                    argb: \"F2F2F2\"\n                                }\n                            },\n                            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                            border: cellStyle.border\n                        };\n                    });\n                    summaryCurrentRow++;\n                    dailyTotal = 0;\n                }\n                // Adicionar linha da transa√ß√£o\n                summarySheet.addRow([\n                    invoiceDate,\n                    invoice.supplier || \"FORNECEDOR N\\xc3O IDENTIFICADO\",\n                    invoice.invoiceNumber,\n                    invoiceValue\n                ]);\n                const row = summarySheet.getRow(summaryCurrentRow);\n                row.eachCell((cell, colNumber)=>{\n                    cell.style = cellStyle;\n                    if (colNumber === 4) {\n                        cell.numFmt = \"R$ #,##0.00\";\n                    }\n                });\n                currentDate = invoiceDate;\n                dailyTotal += invoiceValue;\n                summaryCurrentRow++;\n            }\n            // Total final da categoria se houver dados pendentes\n            if (dailyTotal > 0) {\n                summarySheet.addRow([\n                    \"\",\n                    \"\",\n                    \"TOTAL DI\\xc1RIO\",\n                    dailyTotal\n                ]);\n                const totalRow = summarySheet.getRow(summaryCurrentRow);\n                totalRow.eachCell((cell, colNumber)=>{\n                    cell.style = {\n                        font: {\n                            bold: true\n                        },\n                        fill: {\n                            type: \"pattern\",\n                            pattern: \"solid\",\n                            fgColor: {\n                                argb: \"F2F2F2\"\n                            }\n                        },\n                        numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                        border: cellStyle.border\n                    };\n                });\n                summaryCurrentRow++;\n            }\n            // Total da categoria\n            const categoryTotal = fileInvoices.reduce((sum, inv)=>sum + inv.valueNumeric, 0);\n            summarySheet.addRow([\n                \"\",\n                \"\",\n                `TOTAL ${typeLabel}`,\n                categoryTotal\n            ]);\n            const categoryTotalRow = summarySheet.getRow(summaryCurrentRow);\n            categoryTotalRow.eachCell((cell, colNumber)=>{\n                cell.style = {\n                    ...totalRowStyle,\n                    numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                    border: cellStyle.border\n                };\n            });\n            summaryCurrentRow++;\n            // Linha vazia para separa√ß√£o\n            summarySheet.addRow([]);\n            summaryCurrentRow++;\n        }\n    }\n    // Total geral final\n    summarySheet.addRow([\n        \"\",\n        \"\",\n        \"TOTAL GERAL\",\n        summaryData.grandTotal\n    ]);\n    const grandTotalRow = summarySheet.getRow(summaryCurrentRow);\n    grandTotalRow.eachCell((cell, colNumber)=>{\n        cell.style = {\n            ...totalRowStyle,\n            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n            border: cellStyle.border,\n            font: {\n                bold: true,\n                size: 14,\n                color: {\n                    argb: \"FFFFFF\"\n                }\n            }\n        };\n    });\n    // Definir larguras das colunas\n    summarySheet.getColumn(1).width = 15; // Data\n    summarySheet.getColumn(2).width = 60; // Transacionador  \n    summarySheet.getColumn(3).width = 20; // Documento\n    summarySheet.getColumn(4).width = 18; // Valor\n}\n// Fun√ß√£o para criar aba individual da filial avan√ßada\nasync function createAdvancedBranchWorksheet(workbook, branch, branchInvoices) {\n    let cleanBranchName = branch.name.replace(/[\\/\\\\\\?\\*\\[\\]]/g, \"_\").substring(0, 25);\n    const worksheet = workbook.addWorksheet(cleanBranchName);\n    let currentRow = 1;\n    // T√≠tulo da filial\n    const titleRow = worksheet.addRow([\n        `DETALHAMENTO - ${branch.name}`\n    ]);\n    worksheet.mergeCells(`A${currentRow}:E${currentRow}`);\n    titleRow.getCell(1).style = titleStyle;\n    titleRow.height = 30;\n    currentRow++;\n    // Per√≠odo\n    if (branchInvoices.length > 0) {\n        const branchDates = branchInvoices.map((inv)=>new Date(inv.date)).sort((a, b)=>a.getTime() - b.getTime());\n        const startDate = branchDates[0];\n        const endDate = branchDates[branchDates.length - 1];\n        const periodText = `PER√çODO: ${startDate.toLocaleDateString(\"pt-BR\")} - ${endDate.toLocaleDateString(\"pt-BR\")}`;\n        worksheet.addRow([\n            periodText\n        ]);\n        worksheet.mergeCells(`A${currentRow}:E${currentRow}`);\n        worksheet.getCell(`A${currentRow}`).style = {\n            font: {\n                bold: true,\n                size: 12\n            },\n            fill: {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: {\n                    argb: \"E7E6E6\"\n                }\n            },\n            alignment: {\n                horizontal: \"center\",\n                vertical: \"middle\"\n            }\n        };\n        currentRow++;\n    }\n    // Linha vazia\n    worksheet.addRow([]);\n    currentRow++;\n    // Resumo da filial\n    const resumoRow = worksheet.addRow([\n        \"RESUMO DA FILIAL\"\n    ]);\n    worksheet.mergeCells(`A${currentRow}:E${currentRow}`);\n    resumoRow.getCell(1).style = subHeaderStyle;\n    resumoRow.height = 25;\n    currentRow++;\n    worksheet.addRow([\n        \"Total A Pagar:\",\n        `R$ ${branch.totalAPagar.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    currentRow++;\n    worksheet.addRow([\n        \"Total A Receber:\",\n        `R$ ${branch.totalAReceber.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    currentRow++;\n    const saldoLiquido = branch.totalAReceber - branch.totalAPagar;\n    const saldoRow = worksheet.addRow([\n        \"Saldo L\\xedquido:\",\n        `R$ ${saldoLiquido.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    // Colorir saldo l√≠quido\n    const saldoCell = saldoRow.getCell(2);\n    saldoCell.font = {\n        bold: true,\n        color: {\n            argb: saldoLiquido > 0 ? \"008000\" : \"FF0000\"\n        }\n    };\n    currentRow++;\n    // Linha vazia\n    worksheet.addRow([]);\n    currentRow++;\n    worksheet.addRow([]);\n    currentRow++;\n    // Detalhamento de transa√ß√µes por tipo\n    if (branchInvoices.length > 0) {\n        // Separar por tipo de documento\n        const apagarInvoices = branchInvoices.filter((inv)=>inv.documentType === \"A_PAGAR\");\n        const areceberInvoices = branchInvoices.filter((inv)=>inv.documentType === \"A_RECEBER\");\n        // Processar A_PAGAR\n        if (apagarInvoices.length > 0) {\n            const aPagarHeaderRow = worksheet.addRow([\n                \"CONTAS A PAGAR\"\n            ]);\n            worksheet.mergeCells(`A${currentRow}:E${currentRow}`);\n            aPagarHeaderRow.getCell(1).style = subHeaderStyle;\n            currentRow++;\n            worksheet.addRow([]);\n            currentRow++;\n            // Cabe√ßalhos das transa√ß√µes A_PAGAR\n            const transHeaderRow = worksheet.addRow([\n                \"Vencimento\",\n                \"Transacionador\",\n                \"Documento\",\n                \"Valor\",\n                \"Status\"\n            ]);\n            transHeaderRow.eachCell((cell)=>{\n                cell.style = headerStyle;\n            });\n            currentRow++;\n            // Ordenar por data e adicionar transa√ß√µes\n            apagarInvoices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n            let currentDate = \"\";\n            let dailyTotal = 0;\n            apagarInvoices.forEach((invoice)=>{\n                const invoiceDate = new Date(invoice.date).toLocaleDateString(\"pt-BR\");\n                // Verificar mudan√ßa de data para total di√°rio\n                if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n                    worksheet.addRow([\n                        \"\",\n                        \"\",\n                        \"TOTAL DI\\xc1RIO\",\n                        dailyTotal,\n                        \"\"\n                    ]);\n                    const totalRow = worksheet.getRow(currentRow);\n                    totalRow.eachCell((cell, colNumber)=>{\n                        cell.style = {\n                            font: {\n                                bold: true\n                            },\n                            fill: {\n                                type: \"pattern\",\n                                pattern: \"solid\",\n                                fgColor: {\n                                    argb: \"F2F2F2\"\n                                }\n                            },\n                            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                            border: cellStyle.border\n                        };\n                    });\n                    currentRow++;\n                    dailyTotal = 0;\n                }\n                worksheet.addRow([\n                    invoiceDate,\n                    invoice.supplier,\n                    invoice.invoiceNumber,\n                    invoice.valueNumeric,\n                    \"Pendente\"\n                ]);\n                const row = worksheet.getRow(currentRow);\n                row.eachCell((cell, colNumber)=>{\n                    cell.style = cellStyle;\n                    if (colNumber === 4) {\n                        cell.numFmt = \"R$ #,##0.00\";\n                    }\n                });\n                currentDate = invoiceDate;\n                dailyTotal += invoice.valueNumeric;\n                currentRow++;\n            });\n            // Total final A_PAGAR\n            if (dailyTotal > 0) {\n                worksheet.addRow([\n                    \"\",\n                    \"\",\n                    \"TOTAL DI\\xc1RIO\",\n                    dailyTotal,\n                    \"\"\n                ]);\n                const totalRow = worksheet.getRow(currentRow);\n                totalRow.eachCell((cell, colNumber)=>{\n                    cell.style = {\n                        font: {\n                            bold: true\n                        },\n                        fill: {\n                            type: \"pattern\",\n                            pattern: \"solid\",\n                            fgColor: {\n                                argb: \"F2F2F2\"\n                            }\n                        },\n                        numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                        border: cellStyle.border\n                    };\n                });\n                currentRow++;\n            }\n            const totalAPagarRow = worksheet.addRow([\n                \"\",\n                \"\",\n                \"TOTAL A PAGAR\",\n                branch.totalAPagar,\n                \"\"\n            ]);\n            totalAPagarRow.eachCell((cell, colNumber)=>{\n                cell.style = {\n                    ...totalRowStyle,\n                    numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                    border: cellStyle.border\n                };\n            });\n            currentRow++;\n            // Linha vazia\n            worksheet.addRow([]);\n            currentRow++;\n        }\n        // Processar A_RECEBER\n        if (areceberInvoices.length > 0) {\n            const aReceberHeaderRow = worksheet.addRow([\n                \"CONTAS A RECEBER\"\n            ]);\n            worksheet.mergeCells(`A${currentRow}:E${currentRow}`);\n            aReceberHeaderRow.getCell(1).style = subHeaderStyle;\n            currentRow++;\n            worksheet.addRow([]);\n            currentRow++;\n            // Cabe√ßalhos das transa√ß√µes A_RECEBER\n            const transHeaderRow = worksheet.addRow([\n                \"Vencimento\",\n                \"Cliente\",\n                \"Documento\",\n                \"Valor\",\n                \"Status\"\n            ]);\n            transHeaderRow.eachCell((cell)=>{\n                cell.style = headerStyle;\n            });\n            currentRow++;\n            // Ordenar por data e adicionar transa√ß√µes\n            areceberInvoices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n            let currentDate = \"\";\n            let dailyTotal = 0;\n            areceberInvoices.forEach((invoice)=>{\n                const invoiceDate = new Date(invoice.date).toLocaleDateString(\"pt-BR\");\n                // Verificar mudan√ßa de data para total di√°rio\n                if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n                    worksheet.addRow([\n                        \"\",\n                        \"\",\n                        \"TOTAL DI\\xc1RIO\",\n                        dailyTotal,\n                        \"\"\n                    ]);\n                    const totalRow = worksheet.getRow(currentRow);\n                    totalRow.eachCell((cell, colNumber)=>{\n                        cell.style = {\n                            font: {\n                                bold: true\n                            },\n                            fill: {\n                                type: \"pattern\",\n                                pattern: \"solid\",\n                                fgColor: {\n                                    argb: \"F2F2F2\"\n                                }\n                            },\n                            numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                            border: cellStyle.border\n                        };\n                    });\n                    currentRow++;\n                    dailyTotal = 0;\n                }\n                worksheet.addRow([\n                    invoiceDate,\n                    invoice.supplier,\n                    invoice.invoiceNumber,\n                    invoice.valueNumeric,\n                    \"Pendente\"\n                ]);\n                const row = worksheet.getRow(currentRow);\n                row.eachCell((cell, colNumber)=>{\n                    cell.style = cellStyle;\n                    if (colNumber === 4) {\n                        cell.numFmt = \"R$ #,##0.00\";\n                    }\n                });\n                currentDate = invoiceDate;\n                dailyTotal += invoice.valueNumeric;\n                currentRow++;\n            });\n            // Total final A_RECEBER\n            if (dailyTotal > 0) {\n                worksheet.addRow([\n                    \"\",\n                    \"\",\n                    \"TOTAL DI\\xc1RIO\",\n                    dailyTotal,\n                    \"\"\n                ]);\n                const totalRow = worksheet.getRow(currentRow);\n                totalRow.eachCell((cell, colNumber)=>{\n                    cell.style = {\n                        font: {\n                            bold: true\n                        },\n                        fill: {\n                            type: \"pattern\",\n                            pattern: \"solid\",\n                            fgColor: {\n                                argb: \"F2F2F2\"\n                            }\n                        },\n                        numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                        border: cellStyle.border\n                    };\n                });\n                currentRow++;\n            }\n            const totalAReceberRow = worksheet.addRow([\n                \"\",\n                \"\",\n                \"TOTAL A RECEBER\",\n                branch.totalAReceber,\n                \"\"\n            ]);\n            totalAReceberRow.eachCell((cell, colNumber)=>{\n                cell.style = {\n                    ...totalRowStyle,\n                    numFmt: colNumber === 4 ? \"R$ #,##0.00\" : undefined,\n                    border: cellStyle.border\n                };\n            });\n            currentRow++;\n        }\n    } else {\n        // Mensagem quando n√£o h√° transa√ß√µes detalhadas\n        const noDataRow = worksheet.addRow([\n            \"TRANSA\\xc7\\xd5ES DETALHADAS\"\n        ]);\n        worksheet.mergeCells(`A${currentRow}:E${currentRow}`);\n        noDataRow.getCell(1).style = subHeaderStyle;\n        currentRow++;\n        worksheet.addRow([]);\n        currentRow++;\n        worksheet.addRow([\n            \"Dados detalhados das transa\\xe7\\xf5es ser\\xe3o exibidos aqui quando dispon\\xedveis.\"\n        ]);\n        worksheet.addRow([\n            \"Para obter detalhes, fa\\xe7a upload dos arquivos CSV individuais.\"\n        ]);\n    }\n    // Ajustar largura das colunas\n    worksheet.columns = [\n        {\n            width: 15\n        },\n        {\n            width: 40\n        },\n        {\n            width: 20\n        },\n        {\n            width: 18\n        },\n        {\n            width: 12\n        } // Status\n    ];\n}\n// Fun√ß√£o para criar a aba de resumo geral\nasync function createResumoGeralWorksheet(workbook, summaryData) {\n    const worksheet = workbook.addWorksheet(\"Resumo Geral\");\n    // T√≠tulo principal\n    const titleRow = worksheet.addRow([\n        \"RESUMO GERAL - SALDO L\\xcdQUIDO POR FILIAL\"\n    ]);\n    worksheet.mergeCells(\"A1:D1\");\n    titleRow.getCell(1).fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FF4472C4\"\n        }\n    };\n    titleRow.getCell(1).font = {\n        bold: true,\n        color: {\n            argb: \"FFFFFFFF\"\n        },\n        size: 16\n    };\n    titleRow.getCell(1).alignment = {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    };\n    titleRow.height = 30;\n    worksheet.addRow([]); // Linha vazia\n    // Cabe√ßalhos\n    const headerRow = worksheet.addRow([\n        \"FILIAL\",\n        \"TOTAL A PAGAR\",\n        \"TOTAL A RECEBER\",\n        \"SALDO L\\xcdQUIDO\"\n    ]);\n    headerRow.font = {\n        bold: true,\n        color: {\n            argb: \"FFFFFFFF\"\n        }\n    };\n    headerRow.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FF4472C4\"\n        }\n    };\n    headerRow.alignment = {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    };\n    // Dados das filiais\n    summaryData.branches.forEach((branch)=>{\n        const saldoLiquido = branch.totalAReceber - branch.totalAPagar;\n        const row = worksheet.addRow([\n            branch.name,\n            `R$ ${branch.totalAPagar.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`,\n            `R$ ${branch.totalAReceber.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`,\n            `R$ ${saldoLiquido.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`\n        ]);\n        // Colorir saldo l√≠quido conforme valor\n        const saldoCell = row.getCell(4);\n        if (saldoLiquido > 0) {\n            saldoCell.font = {\n                color: {\n                    argb: \"FF008000\"\n                },\n                bold: true\n            }; // Verde\n        } else if (saldoLiquido < 0) {\n            saldoCell.font = {\n                color: {\n                    argb: \"FFFF0000\"\n                },\n                bold: true\n            }; // Vermelho\n        }\n    });\n    // Linha de total geral\n    worksheet.addRow([]); // Linha vazia\n    const totalRow = worksheet.addRow([\n        \"TOTAL GERAL\",\n        `R$ ${summaryData.grandTotalAPagar.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`,\n        `R$ ${summaryData.grandTotalAReceber.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`,\n        `R$ ${(summaryData.grandTotalAReceber - summaryData.grandTotalAPagar).toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    totalRow.font = {\n        bold: true,\n        size: 12\n    };\n    totalRow.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FFE0E0E0\"\n        }\n    };\n    // Ajustar largura das colunas\n    worksheet.columns = [\n        {\n            width: 20\n        },\n        {\n            width: 18\n        },\n        {\n            width: 18\n        },\n        {\n            width: 18\n        } // Saldo L√≠quido\n    ];\n    // Adicionar bordas\n    const dataRange = worksheet.getRows(3, worksheet.rowCount - 2);\n    dataRange?.forEach((row)=>{\n        row.eachCell((cell)=>{\n            cell.border = {\n                top: {\n                    style: \"thin\"\n                },\n                left: {\n                    style: \"thin\"\n                },\n                bottom: {\n                    style: \"thin\"\n                },\n                right: {\n                    style: \"thin\"\n                }\n            };\n        });\n    });\n}\n// Fun√ß√£o para criar aba individual da filial\nasync function createBranchWorksheet(workbook, branch, processedData) {\n    const worksheet = workbook.addWorksheet(branch.name);\n    // T√≠tulo da filial\n    const titleRow = worksheet.addRow([\n        `DETALHAMENTO - ${branch.name}`\n    ]);\n    worksheet.mergeCells(\"A1:E1\");\n    titleRow.getCell(1).fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FF4472C4\"\n        }\n    };\n    titleRow.getCell(1).font = {\n        bold: true,\n        color: {\n            argb: \"FFFFFFFF\"\n        },\n        size: 14\n    };\n    titleRow.getCell(1).alignment = {\n        horizontal: \"center\",\n        vertical: \"middle\"\n    };\n    titleRow.height = 25;\n    worksheet.addRow([]); // Linha vazia\n    // Resumo da filial\n    const resumoRow = worksheet.addRow([\n        \"RESUMO DA FILIAL\"\n    ]);\n    worksheet.mergeCells(\"A3:E3\");\n    resumoRow.getCell(1).font = {\n        bold: true,\n        size: 12\n    };\n    resumoRow.getCell(1).fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: {\n            argb: \"FFE0E0E0\"\n        }\n    };\n    resumoRow.getCell(1).alignment = {\n        horizontal: \"center\"\n    };\n    worksheet.addRow([\n        \"Total A Pagar:\",\n        `R$ ${branch.totalAPagar.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    worksheet.addRow([\n        \"Total A Receber:\",\n        `R$ ${branch.totalAReceber.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    const saldoLiquido = branch.totalAReceber - branch.totalAPagar;\n    const saldoRow = worksheet.addRow([\n        \"Saldo L\\xedquido:\",\n        `R$ ${saldoLiquido.toLocaleString(\"pt-BR\", {\n            minimumFractionDigits: 2\n        })}`\n    ]);\n    // Colorir saldo l√≠quido\n    const saldoCell = saldoRow.getCell(2);\n    if (saldoLiquido > 0) {\n        saldoCell.font = {\n            color: {\n                argb: \"FF008000\"\n            },\n            bold: true\n        }; // Verde\n    } else if (saldoLiquido < 0) {\n        saldoCell.font = {\n            color: {\n                argb: \"FFFF0000\"\n            },\n            bold: true\n        }; // Vermelho\n    }\n    worksheet.addRow([]); // Linha vazia\n    worksheet.addRow([]); // Linha vazia\n    // Detalhamento de transa√ß√µes (se dispon√≠vel)\n    if (processedData && processedData.transactions.length > 0) {\n        const transactionsHeaderRow = worksheet.addRow([\n            \"DETALHAMENTO DE TRANSA\\xc7\\xd5ES\"\n        ]);\n        worksheet.mergeCells(`A${worksheet.rowCount}:E${worksheet.rowCount}`);\n        transactionsHeaderRow.getCell(1).font = {\n            bold: true,\n            size: 12\n        };\n        transactionsHeaderRow.getCell(1).fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"FFE0E0E0\"\n            }\n        };\n        transactionsHeaderRow.getCell(1).alignment = {\n            horizontal: \"center\"\n        };\n        worksheet.addRow([]); // Linha vazia\n        // Cabe√ßalhos das transa√ß√µes\n        const transHeaderRow = worksheet.addRow([\n            \"Vencimento\",\n            \"Transacionador\",\n            \"Documento\",\n            \"Valor\",\n            \"Tipo\"\n        ]);\n        transHeaderRow.font = {\n            bold: true,\n            color: {\n                argb: \"FFFFFFFF\"\n            }\n        };\n        transHeaderRow.fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"FF4472C4\"\n            }\n        };\n        // Dados das transa√ß√µes\n        processedData.transactions.forEach((transaction)=>{\n            const tipo = transaction.valorNumerico > 0 ? \"A Pagar\" : \"A Receber\";\n            worksheet.addRow([\n                transaction.vencimento,\n                transaction.transacionador,\n                transaction.documento,\n                transaction.valor,\n                tipo\n            ]);\n        });\n    } else {\n        // Mensagem quando n√£o h√° transa√ß√µes detalhadas\n        const noDataRow = worksheet.addRow([\n            \"TRANSA\\xc7\\xd5ES DETALHADAS\"\n        ]);\n        worksheet.mergeCells(`A${worksheet.rowCount}:E${worksheet.rowCount}`);\n        noDataRow.getCell(1).font = {\n            bold: true,\n            size: 12\n        };\n        noDataRow.getCell(1).fill = {\n            type: \"pattern\",\n            pattern: \"solid\",\n            fgColor: {\n                argb: \"FFE0E0E0\"\n            }\n        };\n        noDataRow.getCell(1).alignment = {\n            horizontal: \"center\"\n        };\n        worksheet.addRow([]); // Linha vazia\n        worksheet.addRow([\n            \"Dados detalhados das transa\\xe7\\xf5es ser\\xe3o exibidos aqui quando dispon\\xedveis.\"\n        ]);\n        worksheet.addRow([\n            \"Para obter detalhes, fa\\xe7a upload dos arquivos CSV individuais.\"\n        ]);\n    }\n    // Ajustar largura das colunas\n    worksheet.columns = [\n        {\n            width: 15\n        },\n        {\n            width: 25\n        },\n        {\n            width: 15\n        },\n        {\n            width: 18\n        },\n        {\n            width: 12\n        } // Tipo\n    ];\n    // Adicionar bordas nas c√©lulas importantes\n    const allRows = worksheet.getRows(1, worksheet.rowCount);\n    allRows?.forEach((row)=>{\n        row.eachCell((cell)=>{\n            if (cell.value) {\n                cell.border = {\n                    top: {\n                        style: \"thin\"\n                    },\n                    left: {\n                        style: \"thin\"\n                    },\n                    bottom: {\n                        style: \"thin\"\n                    },\n                    right: {\n                        style: \"thin\"\n                    }\n                };\n            }\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/export-excel.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexport-excel&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexport-excel.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
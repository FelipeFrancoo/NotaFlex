"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/upload-csv";
exports.ids = ["pages/api/upload-csv"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "papaparse":
/*!****************************!*\
  !*** external "papaparse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("papaparse");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupload-csv.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupload-csv.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_upload_csv_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\upload-csv.ts */ \"(api)/./pages/api/upload-csv.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_upload_csv_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_upload_csv_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_upload_csv_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_upload_csv_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/upload-csv\",\n        pathname: \"/api/upload-csv\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_upload_csv_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnVwbG9hZC1jc3YmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q3VwbG9hZC1jc3YudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDd0Q7QUFDeEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHFEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxxREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3RhZmxleC1uZXh0anMvPzk2YmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFx1cGxvYWQtY3N2LnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdXBsb2FkLWNzdlwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VwbG9hZC1jc3ZcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupload-csv.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/storage.ts":
/*!************************!*\
  !*** ./lib/storage.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storage: () => (/* binding */ storage)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// lib/storage.ts\n\n\nclass PersistentStorage {\n    constructor(){\n        this.data = {};\n        this.filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"temp\", \"storage_cache.json\");\n        this.ensureDirectoryExists();\n        this.loadFromFile();\n    }\n    ensureDirectoryExists() {\n        const dir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(this.filePath);\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dir, {\n                recursive: true\n            });\n        }\n    }\n    loadFromFile() {\n        try {\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(this.filePath)) {\n                const content = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(this.filePath, \"utf-8\");\n                this.data = JSON.parse(content);\n                console.log(\"[STORAGE] Dados carregados do cache:\", Object.keys(this.data));\n            }\n        } catch (error) {\n            console.warn(\"[STORAGE] Erro ao carregar cache:\", error);\n            this.data = {};\n        }\n    }\n    saveToFile() {\n        try {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(this.filePath, JSON.stringify(this.data, null, 2));\n            console.log(\"[STORAGE] Dados salvos no cache:\", Object.keys(this.data));\n        } catch (error) {\n            console.warn(\"[STORAGE] Erro ao salvar cache:\", error);\n        }\n    }\n    get(key) {\n        return this.data[key];\n    }\n    set(key, value) {\n        this.data[key] = value;\n        this.saveToFile();\n        console.log(`[STORAGE] Definido ${key}:`, typeof value === \"object\" ? JSON.stringify(value).substring(0, 100) + \"...\" : value);\n    }\n    delete(key) {\n        delete this.data[key];\n        this.saveToFile();\n    }\n    keys() {\n        return Object.keys(this.data);\n    }\n    clear() {\n        this.data = {};\n        this.saveToFile();\n    }\n}\n// Criar instância singleton\nconst persistentStorage = new PersistentStorage();\n// Proxy para manter compatibilidade com sintaxe de array\nconst storage = new Proxy(persistentStorage, {\n    get (target, prop) {\n        if (typeof prop === \"string\") {\n            // Se for um método da classe, retornar o método\n            if (typeof target[prop] === \"function\") {\n                return target[prop].bind(target);\n            }\n            // Caso contrário, tratar como chave de dados\n            return target.get(prop);\n        }\n        return target[prop];\n    },\n    set (target, prop, value) {\n        if (typeof prop === \"string\") {\n            target.set(prop, value);\n            return true;\n        }\n        return false;\n    },\n    deleteProperty (target, prop) {\n        if (typeof prop === \"string\") {\n            target.delete(prop);\n            return true;\n        }\n        return false;\n    },\n    ownKeys (target) {\n        return target.keys();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvc3RvcmFnZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGlCQUFpQjtBQUNHO0FBQ0k7QUFNeEIsTUFBTUU7SUFJSkMsYUFBYzthQUhOQyxPQUFvQixDQUFDO1FBSTNCLElBQUksQ0FBQ0MsUUFBUSxHQUFHSixnREFBUyxDQUFDTSxRQUFRQyxHQUFHLElBQUksUUFBUTtRQUNqRCxJQUFJLENBQUNDLHFCQUFxQjtRQUMxQixJQUFJLENBQUNDLFlBQVk7SUFDbkI7SUFFUUQsd0JBQXdCO1FBQzlCLE1BQU1FLE1BQU1WLG1EQUFZLENBQUMsSUFBSSxDQUFDSSxRQUFRO1FBQ3RDLElBQUksQ0FBQ0wsb0RBQWEsQ0FBQ1csTUFBTTtZQUN2QlgsbURBQVksQ0FBQ1csS0FBSztnQkFBRUksV0FBVztZQUFLO1FBQ3RDO0lBQ0Y7SUFFUUwsZUFBZTtRQUNyQixJQUFJO1lBQ0YsSUFBSVYsb0RBQWEsQ0FBQyxJQUFJLENBQUNLLFFBQVEsR0FBRztnQkFDaEMsTUFBTVcsVUFBVWhCLHNEQUFlLENBQUMsSUFBSSxDQUFDSyxRQUFRLEVBQUU7Z0JBQy9DLElBQUksQ0FBQ0QsSUFBSSxHQUFHYyxLQUFLQyxLQUFLLENBQUNIO2dCQUN2QkksUUFBUUMsR0FBRyxDQUFDLHdDQUF3Q0MsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ25CLElBQUk7WUFDM0U7UUFDRixFQUFFLE9BQU9vQixPQUFPO1lBQ2RKLFFBQVFLLElBQUksQ0FBQyxxQ0FBcUNEO1lBQ2xELElBQUksQ0FBQ3BCLElBQUksR0FBRyxDQUFDO1FBQ2Y7SUFDRjtJQUVRc0IsYUFBYTtRQUNuQixJQUFJO1lBQ0YxQix1REFBZ0IsQ0FBQyxJQUFJLENBQUNLLFFBQVEsRUFBRWEsS0FBS1UsU0FBUyxDQUFDLElBQUksQ0FBQ3hCLElBQUksRUFBRSxNQUFNO1lBQ2hFZ0IsUUFBUUMsR0FBRyxDQUFDLG9DQUFvQ0MsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ25CLElBQUk7UUFDdkUsRUFBRSxPQUFPb0IsT0FBTztZQUNkSixRQUFRSyxJQUFJLENBQUMsbUNBQW1DRDtRQUNsRDtJQUNGO0lBRUFLLElBQUlDLEdBQVcsRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDMUIsSUFBSSxDQUFDMEIsSUFBSTtJQUN2QjtJQUVBQyxJQUFJRCxHQUFXLEVBQUVFLEtBQVUsRUFBRTtRQUMzQixJQUFJLENBQUM1QixJQUFJLENBQUMwQixJQUFJLEdBQUdFO1FBQ2pCLElBQUksQ0FBQ04sVUFBVTtRQUNmTixRQUFRQyxHQUFHLENBQUMsQ0FBQyxtQkFBbUIsRUFBRVMsSUFBSSxDQUFDLENBQUMsRUFBRSxPQUFPRSxVQUFVLFdBQVdkLEtBQUtVLFNBQVMsQ0FBQ0ksT0FBT0MsU0FBUyxDQUFDLEdBQUcsT0FBTyxRQUFRRDtJQUMxSDtJQUVBRSxPQUFPSixHQUFXLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUMxQixJQUFJLENBQUMwQixJQUFJO1FBQ3JCLElBQUksQ0FBQ0osVUFBVTtJQUNqQjtJQUVBSCxPQUFPO1FBQ0wsT0FBT0QsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ25CLElBQUk7SUFDOUI7SUFFQStCLFFBQVE7UUFDTixJQUFJLENBQUMvQixJQUFJLEdBQUcsQ0FBQztRQUNiLElBQUksQ0FBQ3NCLFVBQVU7SUFDakI7QUFDRjtBQUVBLDRCQUE0QjtBQUM1QixNQUFNVSxvQkFBb0IsSUFBSWxDO0FBRTlCLHlEQUF5RDtBQUNsRCxNQUFNbUMsVUFBVSxJQUFJQyxNQUFNRixtQkFBbUI7SUFDbERQLEtBQUlVLE1BQU0sRUFBRUMsSUFBcUI7UUFDL0IsSUFBSSxPQUFPQSxTQUFTLFVBQVU7WUFDNUIsZ0RBQWdEO1lBQ2hELElBQUksT0FBTyxNQUFlLENBQUNBLEtBQUssS0FBSyxZQUFZO2dCQUMvQyxPQUFPLE1BQWUsQ0FBQ0EsS0FBSyxDQUFDQyxJQUFJLENBQUNGO1lBQ3BDO1lBQ0EsNkNBQTZDO1lBQzdDLE9BQU9BLE9BQU9WLEdBQUcsQ0FBQ1c7UUFDcEI7UUFDQSxPQUFPLE1BQWUsQ0FBQ0EsS0FBSztJQUM5QjtJQUNBVCxLQUFJUSxNQUFNLEVBQUVDLElBQXFCLEVBQUVSLEtBQUs7UUFDdEMsSUFBSSxPQUFPUSxTQUFTLFVBQVU7WUFDNUJELE9BQU9SLEdBQUcsQ0FBQ1MsTUFBTVI7WUFDakIsT0FBTztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBQ0FVLGdCQUFlSCxNQUFNLEVBQUVDLElBQXFCO1FBQzFDLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzVCRCxPQUFPTCxNQUFNLENBQUNNO1lBQ2QsT0FBTztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBQ0FHLFNBQVFKLE1BQU07UUFDWixPQUFPQSxPQUFPaEIsSUFBSTtJQUNwQjtBQUNGLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3RhZmxleC1uZXh0anMvLi9saWIvc3RvcmFnZS50cz81ZGM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9zdG9yYWdlLnRzXHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuaW50ZXJmYWNlIFN0b3JhZ2VEYXRhIHtcclxuICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmNsYXNzIFBlcnNpc3RlbnRTdG9yYWdlIHtcclxuICBwcml2YXRlIGRhdGE6IFN0b3JhZ2VEYXRhID0ge307XHJcbiAgcHJpdmF0ZSBmaWxlUGF0aDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZmlsZVBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3RlbXAnLCAnc3RvcmFnZV9jYWNoZS5qc29uJyk7XHJcbiAgICB0aGlzLmVuc3VyZURpcmVjdG9yeUV4aXN0cygpO1xyXG4gICAgdGhpcy5sb2FkRnJvbUZpbGUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZW5zdXJlRGlyZWN0b3J5RXhpc3RzKCkge1xyXG4gICAgY29uc3QgZGlyID0gcGF0aC5kaXJuYW1lKHRoaXMuZmlsZVBhdGgpO1xyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIHtcclxuICAgICAgZnMubWtkaXJTeW5jKGRpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGxvYWRGcm9tRmlsZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChmcy5leGlzdHNTeW5jKHRoaXMuZmlsZVBhdGgpKSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyh0aGlzLmZpbGVQYXRoLCAndXRmLTgnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBKU09OLnBhcnNlKGNvbnRlbnQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbU1RPUkFHRV0gRGFkb3MgY2FycmVnYWRvcyBkbyBjYWNoZTonLCBPYmplY3Qua2V5cyh0aGlzLmRhdGEpKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdbU1RPUkFHRV0gRXJybyBhbyBjYXJyZWdhciBjYWNoZTonLCBlcnJvcik7XHJcbiAgICAgIHRoaXMuZGF0YSA9IHt9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzYXZlVG9GaWxlKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZnMud3JpdGVGaWxlU3luYyh0aGlzLmZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEsIG51bGwsIDIpKTtcclxuICAgICAgY29uc29sZS5sb2coJ1tTVE9SQUdFXSBEYWRvcyBzYWx2b3Mgbm8gY2FjaGU6JywgT2JqZWN0LmtleXModGhpcy5kYXRhKSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ1tTVE9SQUdFXSBFcnJvIGFvIHNhbHZhciBjYWNoZTonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQoa2V5OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGFba2V5XTtcclxuICB9XHJcblxyXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgdGhpcy5kYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgIHRoaXMuc2F2ZVRvRmlsZSgpO1xyXG4gICAgY29uc29sZS5sb2coYFtTVE9SQUdFXSBEZWZpbmlkbyAke2tleX06YCwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKS5zdWJzdHJpbmcoMCwgMTAwKSArICcuLi4nIDogdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGtleTogc3RyaW5nKSB7XHJcbiAgICBkZWxldGUgdGhpcy5kYXRhW2tleV07XHJcbiAgICB0aGlzLnNhdmVUb0ZpbGUoKTtcclxuICB9XHJcblxyXG4gIGtleXMoKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kYXRhKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5kYXRhID0ge307XHJcbiAgICB0aGlzLnNhdmVUb0ZpbGUoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIENyaWFyIGluc3TDom5jaWEgc2luZ2xldG9uXHJcbmNvbnN0IHBlcnNpc3RlbnRTdG9yYWdlID0gbmV3IFBlcnNpc3RlbnRTdG9yYWdlKCk7XHJcblxyXG4vLyBQcm94eSBwYXJhIG1hbnRlciBjb21wYXRpYmlsaWRhZGUgY29tIHNpbnRheGUgZGUgYXJyYXlcclxuZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBuZXcgUHJveHkocGVyc2lzdGVudFN0b3JhZ2UsIHtcclxuICBnZXQodGFyZ2V0LCBwcm9wOiBzdHJpbmcgfCBzeW1ib2wpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgLy8gU2UgZm9yIHVtIG3DqXRvZG8gZGEgY2xhc3NlLCByZXRvcm5hciBvIG3DqXRvZG9cclxuICAgICAgaWYgKHR5cGVvZiAodGFyZ2V0IGFzIGFueSlbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gKHRhcmdldCBhcyBhbnkpW3Byb3BdLmJpbmQodGFyZ2V0KTtcclxuICAgICAgfVxyXG4gICAgICAvLyBDYXNvIGNvbnRyw6FyaW8sIHRyYXRhciBjb21vIGNoYXZlIGRlIGRhZG9zXHJcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0KHByb3ApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICh0YXJnZXQgYXMgYW55KVtwcm9wXTtcclxuICB9LFxyXG4gIHNldCh0YXJnZXQsIHByb3A6IHN0cmluZyB8IHN5bWJvbCwgdmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGFyZ2V0LnNldChwcm9wLCB2YWx1ZSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0sXHJcbiAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wOiBzdHJpbmcgfCBzeW1ib2wpIHtcclxuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGFyZ2V0LmRlbGV0ZShwcm9wKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSxcclxuICBvd25LZXlzKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIHRhcmdldC5rZXlzKCk7XHJcbiAgfVxyXG59KTtcclxuIl0sIm5hbWVzIjpbImZzIiwicGF0aCIsIlBlcnNpc3RlbnRTdG9yYWdlIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiZmlsZVBhdGgiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsImVuc3VyZURpcmVjdG9yeUV4aXN0cyIsImxvYWRGcm9tRmlsZSIsImRpciIsImRpcm5hbWUiLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwiY29udGVudCIsInJlYWRGaWxlU3luYyIsIkpTT04iLCJwYXJzZSIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiZXJyb3IiLCJ3YXJuIiwic2F2ZVRvRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJzdHJpbmdpZnkiLCJnZXQiLCJrZXkiLCJzZXQiLCJ2YWx1ZSIsInN1YnN0cmluZyIsImRlbGV0ZSIsImNsZWFyIiwicGVyc2lzdGVudFN0b3JhZ2UiLCJzdG9yYWdlIiwiUHJveHkiLCJ0YXJnZXQiLCJwcm9wIiwiYmluZCIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/storage.ts\n");

/***/ }),

/***/ "(api)/./pages/api/upload-csv.ts":
/*!*********************************!*\
  !*** ./pages/api/upload-csv.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ \"papaparse\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/storage */ \"(api)/./lib/storage.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_0__]);\nformidable__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n// Função para parsing de datas CSV (EXATA)\nfunction parseCSVDate(dateStr) {\n    const formats = [\n        /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/,\n        /(\\d{4})-(\\d{1,2})-(\\d{1,2})/\n    ];\n    for (const format of formats){\n        const match = dateStr.match(format);\n        if (match) {\n            if (format === formats[0]) {\n                // DD/MM/YYYY - formato brasileiro\n                return new Date(parseInt(match[3]), parseInt(match[2]) - 1, parseInt(match[1]));\n            } else {\n                // YYYY-MM-DD - formato ISO\n                return new Date(parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3]));\n            }\n        }\n    }\n    return new Date(dateStr); // Fallback\n}\n// Função auxiliar para semana (EXATA)\nfunction getWeekBoundaries(date) {\n    const dayOfWeek = date.getDay();\n    const weekStart = new Date(date);\n    weekStart.setDate(date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1)); // Monday\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6); // Sunday\n    weekEnd.setHours(23, 59, 59, 999);\n    return {\n        weekStart,\n        weekEnd\n    };\n}\n// Função para parsing de valores monetários\nfunction parseMonetaryValue(str) {\n    let cleanValue = str.replace(/[R$\\s]/g, \"\").replace(/\\./g, \"\").replace(\",\", \".\");\n    const isNegative = cleanValue.startsWith(\"-\");\n    if (isNegative) {\n        cleanValue = cleanValue.substring(1);\n    }\n    const value = parseFloat(cleanValue);\n    return isNegative ? -value : value;\n}\n// Função para detectar encoding\nfunction detectEncoding(buffer) {\n    const encodings = [\n        \"utf-8\",\n        \"latin1\",\n        \"ascii\",\n        \"utf16le\"\n    ];\n    for (const encoding of encodings){\n        try {\n            const decoded = buffer.toString(encoding);\n            // Verificar se contém caracteres especiais brasileiros\n            if (decoded.includes(\"\\xe7\") || decoded.includes(\"\\xe3\") || decoded.includes(\"\\xe9\")) {\n                return encoding;\n            }\n        } catch (error) {\n            continue;\n        }\n    }\n    return \"utf-8\"; // fallback\n}\n// Função para extrair transacionador e documento seguindo especificação EXATA\nfunction extrairTransacionadorEDocumento(csvContent, documentType, nomeFilial) {\n    // Parse CSV sem headers\n    const parseResult = papaparse__WEBPACK_IMPORTED_MODULE_2___default().parse(csvContent, {\n        header: false,\n        skipEmptyLines: true\n    });\n    const rows = parseResult.data;\n    const documentosExtraidos = [];\n    // Processar cada linha do CSV\n    for (const row of rows){\n        // VALIDAÇÃO ESTRUTURAL OBRIGATÓRIA\n        if (!Array.isArray(row) || row.length < 5) continue;\n        const category = row[0]?.toString().trim() || \"\";\n        let dateStr = \"\";\n        let transacionador = \"\";\n        let numeroDocumento = \"\";\n        let valueStr = \"\";\n        // LÓGICA DE IDENTIFICAÇÃO POR TIPO DE DOCUMENTO\n        if (documentType === \"A_PAGAR\") {\n            // Match EXATO - não usar includes()\n            if (category !== \"Contas a pagar- \\xc0 vencer\") continue;\n            // MAPEAMENTO FIXO DAS COLUNAS:\n            dateStr = row[1]?.toString().trim() || \"\"; // COLUNA 1: Data Vencimento\n            transacionador = row[2]?.toString().trim() || \"\"; // COLUNA 2: TRANSACIONADOR\n            numeroDocumento = row[3]?.toString().trim() || \"\"; // COLUNA 3: NÚMERO DO DOCUMENTO\n            valueStr = row[5]?.toString().trim() || \"0\"; // COLUNA 5: Valor (SEMPRE coluna 5)\n        } else if (documentType === \"A_RECEBER\") {\n            // Match EXATO - não usar includes()\n            if (category !== \"Contas a receber - A vencer\") continue;\n            // MAPEAMENTO FIXO DAS COLUNAS:\n            dateStr = row[1]?.toString().trim() || \"\"; // COLUNA 1: Data Vencimento\n            transacionador = row[2]?.toString().trim() || \"\"; // COLUNA 2: TRANSACIONADOR\n            numeroDocumento = row[3]?.toString().trim() || \"\"; // COLUNA 3: NÚMERO DO DOCUMENTO\n            valueStr = row[5]?.toString().trim() || \"0\"; // COLUNA 5: Valor (SEMPRE coluna 5)\n        }\n        // VALIDAÇÕES OBRIGATÓRIAS DOS DADOS EXTRAÍDOS\n        if (!dateStr || !transacionador || !valueStr) continue;\n        // PARSING DA DATA DE VENCIMENTO\n        const date = parseCSVDate(dateStr);\n        if (!date || isNaN(date.getTime())) continue;\n        // PARSING DO VALOR MONETÁRIO (formato brasileiro)\n        let cleanValue = valueStr.replace(/[R$\\s]/g, \"\").replace(/\\./g, \"\").replace(\",\", \".\");\n        const isNegative = cleanValue.startsWith(\"-\");\n        if (isNegative) {\n            cleanValue = cleanValue.substring(1);\n        }\n        const value = parseFloat(cleanValue);\n        if (isNaN(value) || value <= 0) continue;\n        // APLICAÇÃO DE FALLBACKS PARA CAMPOS OBRIGATÓRIOS\n        const transacionadorFinal = transacionador || \"FORNECEDOR N\\xc3O IDENTIFICADO\";\n        const numeroDocumentoFinal = numeroDocumento || \"\"; // Removido fallback 'PENDENTE'\n        // ESTRUTURA FINAL DOS DADOS EXTRAÍDOS\n        const { weekStart, weekEnd } = getWeekBoundaries(date);\n        documentosExtraidos.push({\n            dataVencimento: date,\n            transacionador: transacionadorFinal,\n            numeroDocumento: numeroDocumentoFinal,\n            valor: value,\n            valorOriginal: valueStr,\n            categoria: documentType,\n            filial: nomeFilial,\n            // Dados de compatibilidade\n            weekStart: weekStart,\n            weekEnd: weekEnd,\n            sourceFile: `${nomeFilial}.csv`\n        });\n    }\n    return documentosExtraidos;\n}\n// Configuração para desabilitar o parser padrão do Next.js\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        // Opcional: limpar dados anteriores se solicitado\n        if (req.query.clearData === \"true\") {\n            _lib_storage__WEBPACK_IMPORTED_MODULE_4__.storage.delete(\"summaryData\");\n            _lib_storage__WEBPACK_IMPORTED_MODULE_4__.storage.delete(\"processedData\");\n        }\n        console.log(\"=== DEBUG UPLOAD CSV ===\");\n        console.log(\"Method:\", req.method);\n        console.log(\"Content-Type:\", req.headers[\"content-type\"]);\n        console.log(\"Headers:\", JSON.stringify(req.headers, null, 2));\n        // Garantir que a pasta temp existe\n        const tempDir = \"./temp\";\n        if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(tempDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(tempDir, {\n                recursive: true\n            });\n        }\n        // Configurar formidable para upload de múltiplos arquivos\n        const form = (0,formidable__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            uploadDir: tempDir,\n            keepExtensions: true,\n            maxFiles: 10,\n            maxFileSize: 10 * 1024 * 1024\n        });\n        const [fields, files] = await form.parse(req);\n        console.log(\"=== PARSED DATA ===\");\n        console.log(\"Fields:\", JSON.stringify(fields, null, 2));\n        console.log(\"Files keys:\", Object.keys(files));\n        console.log(\"Files structure:\", JSON.stringify(files, null, 2));\n        // Obter tipos de documento selecionados\n        let selectedTypes = [\n            \"A_PAGAR\",\n            \"A_RECEBER\"\n        ]; // Default\n        if (fields.documentTypes && fields.documentTypes.length > 0) {\n            const documentTypesString = fields.documentTypes[0];\n            console.log(\"documentTypesString recebido:\", documentTypesString);\n            try {\n                // Tentar fazer parse se for JSON\n                const parsed = JSON.parse(documentTypesString);\n                console.log(\"JSON parsed:\", parsed);\n                if (Array.isArray(parsed)) {\n                    selectedTypes = parsed;\n                } else if (typeof parsed === \"object\") {\n                    // Se for um objeto com indices, extrair os valores e flatten\n                    const allTypes = [];\n                    Object.values(parsed).forEach((typeArray)=>{\n                        if (Array.isArray(typeArray)) {\n                            allTypes.push(...typeArray);\n                        }\n                    });\n                    // Remover duplicatas\n                    const uniqueTypes = Array.from(new Set(allTypes));\n                    selectedTypes = uniqueTypes;\n                }\n            } catch (e) {\n                console.log(\"Erro no parse JSON:\", e);\n                // Se não for JSON, usar como array direto\n                selectedTypes = Array.isArray(fields.documentTypes) ? fields.documentTypes : [\n                    documentTypesString\n                ];\n            }\n        }\n        console.log(\"Selected types processados:\", selectedTypes);\n        // NORMALIZAÇÃO ROBUSTA DE ARQUIVOS (multi-field, multi-file)\n        const allFiles = Object.values(files).flat().filter(Boolean);\n        console.log(\"=== FILE PROCESSING ===\");\n        console.log(\"allFiles (normalizado):\", allFiles.map((f)=>({\n                originalFilename: f.originalFilename,\n                path: f.filepath\n            })));\n        console.log(\"allFiles length:\", allFiles.length);\n        // Filtrar apenas arquivos CSV - sendo mais permissivo para debug\n        const csvFiles = allFiles.filter((file)=>{\n            console.log(\"Checking file:\", file ? {\n                originalFilename: file.originalFilename,\n                mimetype: file.mimetype,\n                size: file.size,\n                filepath: file.filepath\n            } : \"null file\");\n            if (!file || !file.originalFilename) return false;\n            // Aceitar .csv ou .txt (alguns sistemas exportam assim), case insensitive\n            return /\\.(csv|txt)$/i.test(file.originalFilename);\n        });\n        console.log(\"=== FILTERING RESULTS ===\");\n        console.log(\"CSV Files found:\", csvFiles.length);\n        console.log(\"Selected types:\", selectedTypes);\n        console.log(\"CSV Files details:\", csvFiles.map((f)=>f ? {\n                name: f.originalFilename,\n                type: f.mimetype,\n                size: f.size\n            } : null));\n        if (csvFiles.length === 0) {\n            console.log(\"=== ERROR: NO FILES ===\");\n            console.log(\"No CSV files found after filtering\");\n            return res.status(400).json({\n                success: false,\n                message: `Nenhum arquivo foi encontrado. Arquivos recebidos: ${allFiles.length}. Verifique se o arquivo é um CSV válido.`\n            });\n        }\n        const allTransactions = [];\n        const allFilesData = [];\n        const allFilesResults = [];\n        // Processar cada arquivo CSV\n        for (const file of csvFiles){\n            console.log(`=== PROCESSING FILE: ${file?.originalFilename} ===`);\n            if (!file || !file.filepath) {\n                console.log(\"Skipping invalid file:\", file);\n                continue;\n            }\n            try {\n                console.log(\"File path:\", file.filepath);\n                console.log(\"File exists:\", fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(file.filepath));\n                const buffer = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(file.filepath);\n                const encoding = detectEncoding(buffer);\n                const csvContent = buffer.toString(encoding);\n                // Extrair nome da filial\n                const branchName = (file.originalFilename || \"FILIAL_DESCONHECIDA\").replace(/\\.(csv|txt)$/i, \"\").toUpperCase();\n                const fileTransactions = [];\n                // Processar cada tipo de documento selecionado usando a nova lógica\n                for (const documentType of selectedTypes){\n                    console.log(`Processando tipo de documento: ${documentType} para arquivo: ${file.originalFilename}`);\n                    // Usar a função de extração específica com a lógica correta\n                    const documentosExtraidos = extrairTransacionadorEDocumento(csvContent, documentType, branchName);\n                    console.log(`Documentos extraídos para ${documentType}:`, documentosExtraidos.length);\n                    // Log dos primeiros documentos para debug\n                    if (documentosExtraidos.length > 0) {\n                        console.log(\"Primeiros documentos extra\\xeddos:\", documentosExtraidos.slice(0, 3).map((doc)=>({\n                                transacionador: doc.transacionador,\n                                numeroDocumento: doc.numeroDocumento,\n                                valor: doc.valor,\n                                dataVencimento: doc.dataVencimento.toLocaleDateString(\"pt-BR\")\n                            })));\n                    }\n                    // Converter para o formato TransactionData (manter compatibilidade)\n                    for (const doc of documentosExtraidos){\n                        const transaction = {\n                            date: doc.dataVencimento,\n                            supplier: doc.transacionador,\n                            docNumber: doc.numeroDocumento,\n                            value: doc.valor,\n                            category: documentType === \"A_PAGAR\" ? \"Contas a pagar- \\xc0 vencer\" : \"Contas a receber - A vencer\",\n                            branch: doc.filial,\n                            documentType: doc.categoria,\n                            sourceFile: file.originalFilename || `${branchName}.csv`\n                        };\n                        fileTransactions.push(transaction);\n                        allTransactions.push(transaction);\n                    }\n                }\n                allFilesData.push({\n                    filename: file.originalFilename,\n                    branch: branchName,\n                    transactions: fileTransactions,\n                    totalTransactions: fileTransactions.length\n                });\n                // Agregação individual por arquivo\n                const branchTotalsMap = new Map();\n                const dailyTotalsMap = new Map();\n                let totalPayable = 0;\n                let totalReceivable = 0;\n                let grandTotalValue = 0;\n                fileTransactions.forEach((transaction)=>{\n                    const { branch, date, value, documentType } = transaction;\n                    const { weekStart, weekEnd } = getWeekBoundaries(date);\n                    const branchKey = branch;\n                    if (!branchTotalsMap.has(branchKey)) {\n                        branchTotalsMap.set(branchKey, {\n                            invoiceCount: 0,\n                            totalValue: 0,\n                            weekStart,\n                            weekEnd\n                        });\n                    }\n                    const branchTotal = branchTotalsMap.get(branchKey);\n                    branchTotal.invoiceCount++;\n                    branchTotal.totalValue += value;\n                    const dateKey = `${branch}-${date.toISOString().split(\"T\")[0]}`;\n                    const dayOfWeek = [\n                        \"Domingo\",\n                        \"Segunda\",\n                        \"Ter\\xe7a\",\n                        \"Quarta\",\n                        \"Quinta\",\n                        \"Sexta\",\n                        \"S\\xe1bado\"\n                    ][date.getDay()];\n                    if (!dailyTotalsMap.has(dateKey)) {\n                        dailyTotalsMap.set(dateKey, {\n                            date,\n                            dayOfWeek,\n                            totalValue: 0,\n                            invoiceCount: 0,\n                            branch\n                        });\n                    }\n                    const dailyTotal = dailyTotalsMap.get(dateKey);\n                    dailyTotal.totalValue += value;\n                    dailyTotal.invoiceCount++;\n                    if (documentType === \"A_PAGAR\") {\n                        totalPayable += value;\n                    } else if (documentType === \"A_RECEBER\") {\n                        totalReceivable += value;\n                    }\n                    grandTotalValue += value;\n                });\n                const branchTotals = Array.from(branchTotalsMap.entries()).map(([branch, data])=>({\n                        id: (0,crypto__WEBPACK_IMPORTED_MODULE_5__.randomUUID)(),\n                        branch,\n                        invoiceCount: data.invoiceCount,\n                        totalValue: `R$ ${data.totalValue.toLocaleString(\"pt-BR\", {\n                            minimumFractionDigits: 2\n                        })}`,\n                        weekStart: data.weekStart,\n                        weekEnd: data.weekEnd\n                    }));\n                const dailyTotals = Array.from(dailyTotalsMap.values()).map((data)=>({\n                        id: (0,crypto__WEBPACK_IMPORTED_MODULE_5__.randomUUID)(),\n                        ...data,\n                        totalValue: `R$ ${data.totalValue.toLocaleString(\"pt-BR\", {\n                            minimumFractionDigits: 2\n                        })}`\n                    }));\n                const workingDaysTotal = dailyTotals.filter((d)=>![\n                        0,\n                        6\n                    ].includes(d.date.getDay())).reduce((sum, d)=>sum + parseMonetaryValue(d.totalValue), 0);\n                const weekendTotal = dailyTotals.filter((d)=>[\n                        0,\n                        6\n                    ].includes(d.date.getDay())).reduce((sum, d)=>sum + parseMonetaryValue(d.totalValue), 0);\n                const workingDays = dailyTotals.filter((d)=>![\n                        0,\n                        6\n                    ].includes(d.date.getDay())).length;\n                const weekendDays = dailyTotals.filter((d)=>[\n                        0,\n                        6\n                    ].includes(d.date.getDay())).length;\n                const minDate = fileTransactions.length > 0 ? new Date(Math.min(...fileTransactions.map((t)=>t.date.getTime()))) : new Date();\n                const maxDate = fileTransactions.length > 0 ? new Date(Math.max(...fileTransactions.map((t)=>t.date.getTime()))) : new Date();\n                allFilesResults.push({\n                    filename: file.originalFilename,\n                    branch: branchName,\n                    processedData: {\n                        branchTotals,\n                        dailyTotals,\n                        weeklyTotals: {\n                            workingDaysTotal: `R$ ${workingDaysTotal.toLocaleString(\"pt-BR\", {\n                                minimumFractionDigits: 2\n                            })}`,\n                            weekendTotal: `R$ ${weekendTotal.toLocaleString(\"pt-BR\", {\n                                minimumFractionDigits: 2\n                            })}`,\n                            weekTotal: `R$ ${grandTotalValue.toLocaleString(\"pt-BR\", {\n                                minimumFractionDigits: 2\n                            })}`,\n                            workingDays,\n                            weekendDays,\n                            weekPeriod: `${minDate.toLocaleDateString(\"pt-BR\")} - ${maxDate.toLocaleDateString(\"pt-BR\")}`,\n                            totalPayable,\n                            totalReceivable\n                        },\n                        grandTotal: `R$ ${grandTotalValue.toLocaleString(\"pt-BR\", {\n                            minimumFractionDigits: 2\n                        })}`,\n                        totalInvoices: fileTransactions.length\n                    }\n                });\n                // Limpar arquivo temporário\n                if (file.filepath && fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(file.filepath)) {\n                    fs__WEBPACK_IMPORTED_MODULE_1___default().unlinkSync(file.filepath);\n                }\n            } catch (processFileErr) {\n                console.error(\"Erro ao processar arquivo individual, continuando com os demais:\", file?.originalFilename, processFileErr);\n                continue;\n            }\n        }\n        // Agregação de dados\n        const branchTotalsMap = new Map();\n        const dailyTotalsMap = new Map();\n        let totalPayable = 0;\n        let totalReceivable = 0;\n        let grandTotalValue = 0;\n        // Processar transações para agregação\n        allTransactions.forEach((transaction)=>{\n            const { branch, date, value, documentType } = transaction;\n            // Atualizar totais por filial\n            const { weekStart, weekEnd } = getWeekBoundaries(date);\n            const branchKey = branch;\n            if (!branchTotalsMap.has(branchKey)) {\n                branchTotalsMap.set(branchKey, {\n                    invoiceCount: 0,\n                    totalValue: 0,\n                    weekStart,\n                    weekEnd\n                });\n            }\n            const branchTotal = branchTotalsMap.get(branchKey);\n            branchTotal.invoiceCount++;\n            branchTotal.totalValue += value;\n            // Atualizar totais diários\n            const dateKey = `${branch}-${date.toISOString().split(\"T\")[0]}`;\n            const dayOfWeek = [\n                \"Domingo\",\n                \"Segunda\",\n                \"Ter\\xe7a\",\n                \"Quarta\",\n                \"Quinta\",\n                \"Sexta\",\n                \"S\\xe1bado\"\n            ][date.getDay()];\n            if (!dailyTotalsMap.has(dateKey)) {\n                dailyTotalsMap.set(dateKey, {\n                    date,\n                    dayOfWeek,\n                    totalValue: 0,\n                    invoiceCount: 0,\n                    branch\n                });\n            }\n            const dailyTotal = dailyTotalsMap.get(dateKey);\n            dailyTotal.totalValue += value;\n            dailyTotal.invoiceCount++;\n            // Atualizar totais por tipo\n            if (documentType === \"A_PAGAR\") {\n                totalPayable += value;\n            } else if (documentType === \"A_RECEBER\") {\n                totalReceivable += value;\n            }\n            grandTotalValue += value;\n        });\n        // Converter Maps para arrays\n        const branchTotals = Array.from(branchTotalsMap.entries()).map(([branch, data])=>({\n                id: (0,crypto__WEBPACK_IMPORTED_MODULE_5__.randomUUID)(),\n                branch,\n                invoiceCount: data.invoiceCount,\n                totalValue: `R$ ${data.totalValue.toLocaleString(\"pt-BR\", {\n                    minimumFractionDigits: 2\n                })}`,\n                weekStart: data.weekStart,\n                weekEnd: data.weekEnd\n            }));\n        const dailyTotals = Array.from(dailyTotalsMap.values()).map((data)=>({\n                id: (0,crypto__WEBPACK_IMPORTED_MODULE_5__.randomUUID)(),\n                ...data,\n                totalValue: `R$ ${data.totalValue.toLocaleString(\"pt-BR\", {\n                    minimumFractionDigits: 2\n                })}`\n            }));\n        // Calcular totais semanais\n        const workingDaysTotal = dailyTotals.filter((d)=>![\n                0,\n                6\n            ].includes(d.date.getDay())) // Não domingo/sábado\n        .reduce((sum, d)=>sum + parseMonetaryValue(d.totalValue), 0);\n        const weekendTotal = dailyTotals.filter((d)=>[\n                0,\n                6\n            ].includes(d.date.getDay())) // Domingo/sábado\n        .reduce((sum, d)=>sum + parseMonetaryValue(d.totalValue), 0);\n        const workingDays = dailyTotals.filter((d)=>![\n                0,\n                6\n            ].includes(d.date.getDay())).length;\n        const weekendDays = dailyTotals.filter((d)=>[\n                0,\n                6\n            ].includes(d.date.getDay())).length;\n        const minDate = allTransactions.length > 0 ? new Date(Math.min(...allTransactions.map((t)=>t.date.getTime()))) : new Date();\n        const maxDate = allTransactions.length > 0 ? new Date(Math.max(...allTransactions.map((t)=>t.date.getTime()))) : new Date();\n        const processedData = {\n            branchTotals,\n            dailyTotals,\n            weeklyTotals: {\n                workingDaysTotal: `R$ ${workingDaysTotal.toLocaleString(\"pt-BR\", {\n                    minimumFractionDigits: 2\n                })}`,\n                weekendTotal: `R$ ${weekendTotal.toLocaleString(\"pt-BR\", {\n                    minimumFractionDigits: 2\n                })}`,\n                weekTotal: `R$ ${grandTotalValue.toLocaleString(\"pt-BR\", {\n                    minimumFractionDigits: 2\n                })}`,\n                workingDays,\n                weekendDays,\n                weekPeriod: `${minDate.toLocaleDateString(\"pt-BR\")} - ${maxDate.toLocaleDateString(\"pt-BR\")}`,\n                totalPayable,\n                totalReceivable\n            },\n            grandTotal: `R$ ${grandTotalValue.toLocaleString(\"pt-BR\", {\n                minimumFractionDigits: 2\n            })}`,\n            totalInvoices: allTransactions.length,\n            transactions: allTransactions.map((transaction)=>({\n                    vencimento: transaction.date.toLocaleDateString(\"pt-BR\"),\n                    transacionador: transaction.supplier,\n                    documento: transaction.docNumber,\n                    valor: `R$ ${transaction.value.toLocaleString(\"pt-BR\", {\n                        minimumFractionDigits: 2\n                    })}`,\n                    valorNumerico: transaction.value,\n                    documentType: transaction.documentType,\n                    filial: transaction.branch,\n                    sourceFile: transaction.sourceFile // nome original do arquivo\n                }))\n        };\n        // Cache dos dados processados para exportação posterior sem precisar reenviar pelo frontend\n        try {\n            const cachePath = path__WEBPACK_IMPORTED_MODULE_3___default().join(tempDir, \"last_processed.json\");\n            fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(cachePath, JSON.stringify(processedData, null, 2), \"utf8\");\n        } catch (cacheErr) {\n            console.warn(\"N\\xe3o foi poss\\xedvel salvar cache de processedData:\", cacheErr);\n        }\n        // ===== INÍCIO: GERAÇÃO DE summaryData PARA /api/export-summary-excel =====\n        try {\n            // Guardar processedData em memória também\n            _lib_storage__WEBPACK_IMPORTED_MODULE_4__.storage.set(\"processedData\", processedData);\n            const branchMap = {};\n            const dateTotalsMap = {};\n            processedData.transactions.forEach((tr)=>{\n                const branch = tr.filial || tr.sourceFile?.replace(/\\.csv$/i, \"\") || \"DESCONHECIDA\";\n                if (!branchMap[branch]) branchMap[branch] = {\n                    pagar: 0,\n                    receber: 0\n                };\n                if (tr.documentType === \"A_PAGAR\") branchMap[branch].pagar += tr.valorNumerico;\n                else if (tr.documentType === \"A_RECEBER\") branchMap[branch].receber += tr.valorNumerico;\n                // Totais por data (usando apenas A_PAGAR para manter consistência com resumo anterior)\n                if (tr.documentType === \"A_PAGAR\") {\n                    const dateStr = tr.vencimento; // já em DD/MM/YYYY\n                    if (!dateTotalsMap[dateStr]) dateTotalsMap[dateStr] = 0;\n                    dateTotalsMap[dateStr] += tr.valorNumerico;\n                }\n            });\n            const branchesSummary = Object.entries(branchMap).map(([name, v])=>({\n                    name,\n                    totalAPagar: v.pagar,\n                    totalAReceber: v.receber,\n                    total: v.pagar + v.receber\n                }));\n            // Construir dateSpecificTotals ordenado\n            const dateSpecificTotals = Object.entries(dateTotalsMap).map(([day, total])=>({\n                    day,\n                    total\n                })).filter((d)=>/\\d{1,2}\\/\\d{1,2}\\/\\d{4}/.test(d.day)).sort((a, b)=>{\n                const [da, ma, ya] = a.day.split(\"/\").map(Number);\n                const [db, mb, yb] = b.day.split(\"/\").map(Number);\n                return new Date(ya, ma - 1, da).getTime() - new Date(yb, mb - 1, db).getTime();\n            });\n            // DocumentDates com dia da semana (apenas dias úteis)\n            const documentDates = dateSpecificTotals.map((d)=>{\n                const [day, month, year] = d.day.split(\"/\").map(Number);\n                const date = new Date(year, month - 1, day);\n                const dayNames = [\n                    \"Domingo\",\n                    \"Segunda\",\n                    \"Ter\\xe7a\",\n                    \"Quarta\",\n                    \"Quinta\",\n                    \"Sexta\",\n                    \"S\\xe1bado\"\n                ];\n                return {\n                    day: d.day,\n                    dayOfWeek: dayNames[date.getDay()],\n                    total: d.total,\n                    date\n                };\n            }).filter((item)=>{\n                const dow = item.date.getDay();\n                return dow >= 1 && dow <= 5; // dias úteis\n            }).sort((a, b)=>a.date.getTime() - b.date.getTime()).map(({ day, dayOfWeek, total })=>({\n                    day,\n                    dayOfWeek,\n                    total\n                }));\n            const grandTotalAPagar = branchesSummary.reduce((s, b)=>s + b.totalAPagar, 0);\n            const grandTotalAReceber = branchesSummary.reduce((s, b)=>s + b.totalAReceber, 0);\n            const grandTotal = dateSpecificTotals.reduce((s, d)=>s + d.total, 0);\n            const summaryData = {\n                branches: branchesSummary,\n                dailyTotals: [],\n                documentDates,\n                dateSpecificTotals,\n                grandTotal,\n                grandTotalAPagar,\n                grandTotalAReceber,\n                totalAPagar: grandTotalAPagar\n            };\n            _lib_storage__WEBPACK_IMPORTED_MODULE_4__.storage.set(\"summaryData\", summaryData);\n        } catch (summaryErr) {\n            console.warn(\"Falha ao gerar summaryData a partir de processedData:\", summaryErr);\n        }\n        // ===== FIM: GERAÇÃO DE summaryData =====\n        // Create response data without transactions to match client schema\n        const { transactions, ...clientProcessedData } = processedData;\n        return res.status(200).json({\n            success: true,\n            message: `${csvFiles.length} arquivo(s) processado(s) com sucesso`,\n            data: allFilesResults,\n            summaryData: _lib_storage__WEBPACK_IMPORTED_MODULE_4__.storage.get(\"summaryData\") || null,\n            allFilesData\n        });\n    } catch (error) {\n        console.error(\"=== ERROR IN UPLOAD-CSV ===\");\n        console.error(\"Error type:\", typeof error);\n        console.error(\"Error message:\", error instanceof Error ? error.message : String(error));\n        console.error(\"Error stack:\", error instanceof Error ? error.stack : \"No stack trace\");\n        console.error(\"Full error object:\", error);\n        res.status(500).json({\n            success: false,\n            message: \"Erro interno do servidor: \" + (error instanceof Error ? error.message : String(error))\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/upload-csv.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fupload-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cupload-csv.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
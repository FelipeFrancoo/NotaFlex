{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Invoice Processing System\n\n## Overview\n\nThis is a full-stack web application for processing and analyzing CSV invoice data. The system allows users to upload CSV files containing invoice information, processes the data to generate summaries by branch and daily totals, and provides Excel export functionality. Built with a modern React frontend using shadcn/ui components and an Express.js backend with PostgreSQL database integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on top of Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system using CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation resolvers\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **File Processing**: Multer for file uploads, PapaCSV for CSV parsing, ExcelJS for Excel generation\n- **Development**: Custom Vite integration for hot module replacement in development\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL accessed through Neon serverless driver\n- **ORM**: Drizzle ORM with schema-first approach and automatic migrations\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **File Storage**: In-memory processing with temporary file handling via multer\n\n### Database Schema Design\nThe system uses three main entities:\n- **Invoices**: Individual invoice records with branch, number, date, value, and week boundaries\n- **Branch Summaries**: Aggregated data by branch including count and total values per week\n- **Daily Summaries**: Daily aggregations with day-of-week tracking and totals\n\n### API Structure\n- **RESTful Design**: Standard HTTP methods with JSON responses\n- **File Upload Endpoint**: Multipart form data handling for CSV uploads\n- **Data Export**: Binary file downloads for Excel generation\n- **Error Responses**: Consistent error format with status codes and messages\n\n### Data Processing Pipeline\n- **CSV Parsing**: Flexible date format handling for Brazilian locale (DD/MM/YYYY)\n- **Week Calculation**: Automatic week boundary detection and assignment\n- **Aggregation Logic**: Real-time calculation of branch totals and daily summaries\n- **Memory Storage**: In-memory data structure with Map-based storage for development\n\n## External Dependencies\n\n### Database Services\n- **Neon**: Serverless PostgreSQL database hosting\n- **Drizzle Kit**: Database migration and schema management tools\n\n### UI and Styling\n- **Radix UI**: Comprehensive set of low-level UI primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library with consistent design language\n\n### Development Tools\n- **Vite**: Fast build tool with hot module replacement\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### File Processing\n- **Multer**: Node.js middleware for handling multipart/form-data file uploads\n- **PapaCSV**: Robust CSV parsing library with flexible configuration\n- **ExcelJS**: Excel file generation with formatting and styling capabilities\n\n### State Management\n- **TanStack Query**: Server state synchronization with caching and background updates\n- **React Hook Form**: Performant form handling with minimal re-renders\n\n### Replit Integration\n- **Replit Vite Plugins**: Development environment integration with error overlay and cartographer\n- **Replit Banner**: Development mode identification when accessed outside Replit","size_bytes":3975},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport multer, { type FileFilterCallback } from \"multer\";\nimport Papa from \"papaparse\";\nimport ExcelJS from \"exceljs\";\nimport { z } from \"zod\";\nimport { format, parse } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req: Request, file: Express.Multer.File, cb: FileFilterCallback) => {\n    if (file.mimetype === 'text/csv' || file.originalname.endsWith('.csv')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only CSV files are allowed'));\n    }\n  }\n});\n\n\n\n// Helper function to parse dates from CSV\nfunction parseCSVDate(dateStr: string): Date {\n  // Handle various date formats that might appear in CSV\n  const formats = [\n    /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/, // DD/MM/YYYY or MM/DD/YYYY\n    /(\\d{4})-(\\d{1,2})-(\\d{1,2})/, // YYYY-MM-DD\n  ];\n\n  for (const format of formats) {\n    const match = dateStr.match(format);\n    if (match) {\n      // Assume DD/MM/YYYY format for Brazilian locale\n      if (format === formats[0]) {\n        return new Date(parseInt(match[3]), parseInt(match[2]) - 1, parseInt(match[1]));\n      } else {\n        return new Date(parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3]));\n      }\n    }\n  }\n\n  // Fallback to direct parsing\n  return new Date(dateStr);\n}\n\n// Helper function to parse dates and get day of week using date-fns for better locale support\nfunction parseDateAndGetDayOfWeek(dateStr: string): { date: Date; dayOfWeek: string; isValid: boolean } {\n  let parsedDate: Date | null = null;\n  let dayOfWeek = '';\n  let isValid = false;\n\n  // Try DD/MM/YYYY format\n  try {\n    parsedDate = parse(dateStr, 'dd/MM/yyyy', new Date());\n    if (!isNaN(parsedDate.getTime())) {\n      dayOfWeek = format(parsedDate, 'EEEE', { locale: ptBR });\n      isValid = true;\n    }\n  } catch (e) {\n    // Ignore parsing errors and try next format\n  }\n\n  // If not parsed or invalid, try YYYY-MM-DD format\n  if (!isValid) {\n    try {\n      parsedDate = parse(dateStr, 'yyyy-MM-dd', new Date());\n      if (!isNaN(parsedDate.getTime())) {\n        dayOfWeek = format(parsedDate, 'EEEE', { locale: ptBR });\n        isValid = true;\n      }\n    } catch (e) {\n      // Ignore parsing errors\n    }\n  }\n\n  // If still not valid, return default invalid state\n  if (!isValid || !parsedDate) {\n    return { date: new Date(NaN), dayOfWeek: '', isValid: false };\n  }\n\n  return { date: parsedDate, dayOfWeek, isValid };\n}\n\n// Helper function to get week boundaries\nfunction getWeekBoundaries(date: Date): { weekStart: Date; weekEnd: Date } {\n  const dayOfWeek = date.getDay();\n  const weekStart = new Date(date);\n  weekStart.setDate(date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1)); // Monday\n  weekStart.setHours(0, 0, 0, 0);\n\n  const weekEnd = new Date(weekStart);\n  weekEnd.setDate(weekStart.getDate() + 6); // Sunday\n  weekEnd.setHours(23, 59, 59, 999);\n\n  return { weekStart, weekEnd };\n}\n\n// Helper function to get day of week in Portuguese\nfunction getDayOfWeekPT(date: Date): string {\n  const days = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];\n  return days[date.getDay()];\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // Upload and process CSV file\n  app.post(\"/api/upload-csv\", upload.array('files', 10), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      const documentTypes = req.body.documentTypes ? JSON.parse(req.body.documentTypes) : {};\n\n      if (!files || files.length === 0) {\n        return res.status(400).json({\n          success: false,\n          message: \"Nenhum arquivo foi enviado\"\n        });\n      }\n\n      const allProcessedData = [];\n\n      // Process each file individually with its own period\n      for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\n        const file = files[fileIndex];\n        const documentTypesForFile = documentTypes[fileIndex];\n        const selectedTypes = Array.isArray(documentTypesForFile)\n          ? documentTypesForFile\n          : (typeof documentTypesForFile === 'string' ? [documentTypesForFile] : ['A_PAGAR']);\n        const csvContent = file.buffer.toString('utf-8');\n\n      // Parse CSV without headers to handle complex structure\n      const parseResult = Papa.parse(csvContent, {\n        header: false,\n        skipEmptyLines: true,\n      });\n\n      if (parseResult.errors.length > 0) {\n        return res.status(400).json({\n          success: false,\n          message: \"Erro ao processar CSV: \" + parseResult.errors.map((e: any) => e.message).join(', ')\n        });\n      }\n\n      const rows = parseResult.data as any[];\n\n      // Extract branch name from the first line of CSV (user will replace \"Nome da Filial\" with actual branch name)\n      let branchName = file.originalname.replace(/\\.(csv|CSV)$/, '').trim(); // fallback\n\n      if (rows.length > 0 && Array.isArray(rows[0]) && rows[0][0]) {\n        const firstLineContent = rows[0][0].toString().trim();\n        if (firstLineContent && firstLineContent !== '') {\n          branchName = firstLineContent;\n          console.log('Using first line as branch name:', branchName);\n        }\n      }\n\n      // Clear data only on the first file\n        if (fileIndex === 0) {\n          await storage.clearInvoices();\n          await storage.clearBranchSummaries();\n          await storage.clearDailySummaries();\n          console.log('Cleared existing data for new session');\n        }\n\n      let branchTotal = 0;\n      let branchCount = 0;\n      const dailyTotals = new Map<string, { count: number; total: number; date: Date }>();\n\n      // Track individual document period\n      let documentStartDate: Date | null = null;\n      let documentEndDate: Date | null = null;\n\n      // Process each row - looking for transaction data\n      console.log('Total rows in CSV:', rows.length);\n      console.log('Processing file for branch:', branchName, 'with document types:', selectedTypes);\n\n      // Initialize separate totals by document type\n      const branchTotalsByType = {\n        'A_PAGAR': { count: 0, total: 0 },\n        'A_RECEBER': { count: 0, total: 0 }\n      };\n      const dailyTotalsByType = {\n        'A_PAGAR': new Map<string, { count: number; total: number; date: Date }>(),\n        'A_RECEBER': new Map<string, { count: number; total: number; date: Date }>()\n      };\n\n      // Process for each selected document type separately\n      for (const documentType of selectedTypes) {\n        console.log(`Processing document type: ${documentType}`);\n\n        for (const row of rows) {\n          // Skip if not an array or has less than 5 columns\n          if (!Array.isArray(row) || row.length < 5) continue;\n\n          const category = row[0]?.toString().trim() || '';\n          let dateStr = '';\n          let supplier = '';\n          let docNumber = '';\n          let valueStr = '';\n\n          // Process based on document type selection\n          if (documentType === 'A_PAGAR') {\n            // Look for \"Contas a pagar- À vencer\" rows (exact match)\n            if (category !== 'Contas a pagar- À vencer') continue;\n\n            dateStr = row[1]?.toString().trim() || '';\n            supplier = row[2]?.toString().trim() || '';\n            docNumber = row[3]?.toString().trim() || '';\n            valueStr = row[5]?.toString().trim() || '0';\n          } else if (documentType === 'A_RECEBER') {\n            // Look for \"Contas a receber - A vencer\" rows (exact match)\n            if (category !== 'Contas a receber - A vencer') continue;\n\n            dateStr = row[1]?.toString().trim() || '';\n            supplier = row[2]?.toString().trim() || '';\n            docNumber = row[3]?.toString().trim() || '';\n            valueStr = row[5]?.toString().trim() || '0';\n          }\n\n          console.log('Processing row:', { category, dateStr, supplier, docNumber, valueStr, documentType });\n\n          if (!dateStr || !supplier || !valueStr) continue;\n\n          // Parse date\n          const date = parseCSVDate(dateStr);\n          if (!date || isNaN(date.getTime())) continue;\n\n          // Parse value - handle Brazilian currency format\n          // Remove currency symbols and convert comma decimal separator to dot\n          let cleanValue = valueStr.replace(/[R$\\s]/g, '').replace(/\\./g, '').replace(',', '.');\n\n          // Handle negative values\n          const isNegative = cleanValue.startsWith('-');\n          if (isNegative) {\n            cleanValue = cleanValue.substring(1);\n          }\n\n          const value = parseFloat(cleanValue);\n\n          console.log('Parsed value:', { original: valueStr, cleaned: cleanValue, parsed: value, isNegative });\n\n          if (isNaN(value) || value <= 0) continue;\n\n          // Track individual document date range (not week boundaries)\n          if (!documentStartDate || date < documentStartDate) documentStartDate = date;\n          if (!documentEndDate || date > documentEndDate) documentEndDate = date;\n\n          // Still calculate week boundaries for storage compatibility\n          const weekBounds = getWeekBoundaries(date);\n\n          // Create invoice record using file name as branch\n          await storage.createInvoice({\n            branch: branchName,\n            invoiceNumber: docNumber || `DOC-${Date.now()}`,\n            date: date,\n            value: value.toString(),\n            supplier: supplier || 'FORNECEDOR NÃO IDENTIFICADO',\n            weekStart: weekBounds.weekStart,\n            weekEnd: weekBounds.weekEnd,\n            documentType: documentType,\n            sourceFile: file.originalname,\n          });\n\n          // Aggregate totals for this branch by document type\n          const docType = documentType as 'A_PAGAR' | 'A_RECEBER';\n          branchTotalsByType[docType].count++;\n          branchTotalsByType[docType].total += value;\n\n          // Aggregate daily totals by document type\n          const dayKey = date.toDateString();\n          if (!dailyTotalsByType[docType].has(dayKey)) {\n            dailyTotalsByType[docType].set(dayKey, { count: 0, total: 0, date });\n          }\n          const dayData = dailyTotalsByType[docType].get(dayKey)!;\n          dayData.count++;\n          dayData.total += value;\n        }\n      }\n\n      // Calculate combined totals for this file\n      branchCount = branchTotalsByType['A_PAGAR'].count + branchTotalsByType['A_RECEBER'].count;\n      branchTotal = branchTotalsByType['A_PAGAR'].total + branchTotalsByType['A_RECEBER'].total;\n\n      // Combine daily totals\n        for (const [, dayData] of Array.from(dailyTotalsByType['A_PAGAR'])) {\n          if (!dailyTotals.has(dayData.date.toDateString())) {\n            dailyTotals.set(dayData.date.toDateString(), { count: 0, total: 0, date: dayData.date });\n          }\n          const combined = dailyTotals.get(dayData.date.toDateString())!;\n          combined.count += dayData.count;\n          combined.total += dayData.total;\n        }\n        for (const [, dayData] of Array.from(dailyTotalsByType['A_RECEBER'])) {\n          if (!dailyTotals.has(dayData.date.toDateString())) {\n            dailyTotals.set(dayData.date.toDateString(), { count: 0, total: 0, date: dayData.date });\n          }\n          const combined = dailyTotals.get(dayData.date.toDateString())!;\n          combined.count += dayData.count;\n          combined.total += dayData.total;\n        }\n\n      // Log totals by document type for debugging\n      console.log(`Totals for ${branchName}:`);\n      console.log(`  A_PAGAR: ${branchTotalsByType['A_PAGAR'].count} invoices, total: ${branchTotalsByType['A_PAGAR'].total}`);\n      console.log(`  A_RECEBER: ${branchTotalsByType['A_RECEBER'].count} invoices, total: ${branchTotalsByType['A_RECEBER'].total}`);\n      console.log(`  Combined: ${branchCount} invoices, total: ${branchTotal}`);\n\n      if (!documentStartDate || !documentEndDate) {\n        return res.status(400).json({\n          success: false,\n          message: \"Não foi possível determinar o período do documento a partir dos dados\"\n        });\n      }\n\n      // Log the individual document period\n      console.log(`Document period: ${documentStartDate.toLocaleDateString('pt-BR')} to ${documentEndDate.toLocaleDateString('pt-BR')}`);\n\n      // Log final totals for this branch\n      console.log(`Final totals for branch ${branchName}: ${branchCount} invoices, total: ${branchTotal}`);\n\n      // Check if branch summary already exists and update it, or create new one\n      const existingBranchSummaries = await storage.getBranchSummariesByBranch(branchName);\n\n      if (existingBranchSummaries.length > 0) {\n        // Update existing branch summary\n        const existing = existingBranchSummaries[0];\n        await storage.updateBranchSummary(existing.id, {\n          invoiceCount: existing.invoiceCount + branchCount,\n          totalValue: (parseFloat(existing.totalValue) + branchTotal).toString(),\n        });\n        console.log(`Updated existing branch summary for ${branchName}`);\n      } else {\n        // Create new branch summary using individual document period\n        await storage.createBranchSummary({\n          branch: branchName,\n          invoiceCount: branchCount,\n          totalValue: branchTotal.toString(),\n          weekStart: documentStartDate,\n          weekEnd: documentEndDate,\n        });\n        console.log(`Created new branch summary for ${branchName}`);\n      }\n\n      // Create daily summaries\n      for (const [, data] of Array.from(dailyTotals.entries())) {\n        await storage.createDailySummary({\n          date: data.date,\n          dayOfWeek: getDayOfWeekPT(data.date),\n          totalValue: data.total.toString(),\n          invoiceCount: data.count,\n          branch: branchName,\n        });\n      }\n\n      // Get processed data for this specific file using its document period\n        const fileProcessedData = await storage.getProcessedData(documentStartDate, documentEndDate);\n\n        if (fileProcessedData) {\n          allProcessedData.push({\n            fileName: branchName,\n            period: `${documentStartDate.toLocaleDateString('pt-BR')} - ${documentEndDate.toLocaleDateString('pt-BR')}`,\n            data: fileProcessedData,\n            documentTypes: selectedTypes\n          });\n        }\n      }\n\n      // Return all processed data from all files\n      res.json({\n        success: true,\n        message: `${files.length} arquivo(s) processado(s) com sucesso`,\n        data: allProcessedData.length > 0 ? allProcessedData[allProcessedData.length - 1].data : null,\n        allFilesData: allProcessedData,\n      });\n\n    } catch (error) {\n      console.error('Error processing CSV:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Erro interno do servidor ao processar o arquivo\"\n      });\n    }\n  });\n\n  // Clear all data\n  app.delete(\"/api/clear-data\", async (req, res) => {\n    try {\n      await storage.clearInvoices();\n      await storage.clearBranchSummaries();\n      await storage.clearDailySummaries();\n\n      res.json({\n        success: true,\n        message: \"Todos os dados foram limpos com sucesso\"\n      });\n    } catch (error) {\n      console.error('Error clearing data:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Erro ao limpar dados\"\n      });\n    }\n  });\n\n  // Get processed data\n  app.get(\"/api/processed-data\", async (req, res) => {\n    try {\n      // For this endpoint, we'll get the most recent data\n      // In a real app, you might want to specify date ranges\n      const now = new Date();\n      const weekBounds = getWeekBoundaries(now);\n\n      const processedData = await storage.getProcessedData(weekBounds.weekStart, weekBounds.weekEnd);\n\n      if (!processedData) {\n        return res.status(404).json({\n          success: false,\n          message: \"Nenhum dado processado encontrado\"\n        });\n      }\n\n      res.json({\n        success: true,\n        data: processedData\n      });\n    } catch (error) {\n      console.error('Error getting processed data:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Erro ao recuperar dados processados\"\n      });\n    }\n  });\n\n\n\n  // Generate and download Excel file\n  app.post(\"/api/export-excel\", async (req, res) => {\n    try {\n      // Get report info from request body\n      const { name: reportName, startDate, endDate, categories } = req.body;\n\n      // Get all invoices to create detailed report\n      const allInvoices = Array.from(storage['invoices'].values());\n      const allBranchSummaries = Array.from(storage['branchSummaries'].values());\n\n      if (allInvoices.length === 0 || allBranchSummaries.length === 0) {\n        return res.status(404).json({\n          success: false,\n          message: \"Nenhum dado para exportar\"\n        });\n      }\n\n      // Calculate the actual period based on individual document dates\n      let actualStartDate: Date;\n      let actualEndDate: Date;\n\n      if (allInvoices.length > 0) {\n        // Get the actual date range from all invoices based on their individual dates\n        const invoiceDates = allInvoices.map(inv => new Date(inv.date)).sort((a, b) => a.getTime() - b.getTime());\n        actualStartDate = invoiceDates[0]; // Earliest document date\n        actualEndDate = invoiceDates[invoiceDates.length - 1]; // Latest document date\n      } else {\n        // Fallback to current week if no invoices\n        const now = new Date();\n        const defaultWeekBounds = getWeekBoundaries(now);\n        actualStartDate = defaultWeekBounds.weekStart;\n        actualEndDate = defaultWeekBounds.weekEnd;\n      }\n\n      // Use the actual document date range for getProcessedData\n      const processedData = await storage.getProcessedData(actualStartDate, actualEndDate);\n\n      if (!processedData) {\n        return res.status(404).json({\n          success: false,\n          message: \"Nenhum dado para exportar\"\n        });\n      }\n\n      // Create Excel workbook\n      const workbook = new ExcelJS.Workbook();\n\n      // Header styling\n      const headerStyle = {\n        font: { bold: true, color: { argb: 'FFFFFF' } },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '366092' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        }\n      };\n\n      const subHeaderStyle = {\n        font: { bold: true },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'D9E1F2' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        }\n      };\n\n      const cellStyle = {\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        }\n      };\n\n      const titleStyle = {\n        font: { bold: true, size: 16, color: { argb: 'FFFFFF' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '1F4E79' } }\n      };\n\n      const periodStyle = {\n        font: { bold: true, size: 12 },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'E7E6E6' } }\n      };\n\n      // Group invoices by source file and document type for better organization\n      const invoicesByFile = new Map<string, typeof allInvoices>();\n      const invoicesByFileAndType = new Map<string, { A_PAGAR: typeof allInvoices, A_RECEBER: typeof allInvoices }>();\n\n      for (const invoice of allInvoices) {\n        const sourceFile = invoice.sourceFile || 'Unknown';\n\n        if (!invoicesByFile.has(sourceFile)) {\n          invoicesByFile.set(sourceFile, []);\n        }\n        invoicesByFile.get(sourceFile)!.push(invoice);\n\n        if (!invoicesByFileAndType.has(sourceFile)) {\n          invoicesByFileAndType.set(sourceFile, { A_PAGAR: [], A_RECEBER: [] });\n        }\n        const fileTypes = invoicesByFileAndType.get(sourceFile)!;\n        const docType = (invoice.documentType as 'A_PAGAR' | 'A_RECEBER') || 'A_PAGAR';\n        fileTypes[docType].push(invoice);\n      }\n\n      // Create summary sheet\n      const summarySheet = workbook.addWorksheet('Resumo Geral');\n\n      let summaryCurrentRow = 1;\n      let grandTotal = 0;\n\n      // Calculate grand total from branch data\n      for (const branch of processedData.branchTotals) {\n        grandTotal += parseFloat(branch.totalValue);\n      }\n\n      // Add report name header tab\n      const headerText = reportName || 'Relatório de Notas Fiscais';\n      summarySheet.addRow([headerText]);\n      summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n      summarySheet.getCell(`A${summaryCurrentRow}`).style = {\n        font: { bold: true, size: 16, color: { argb: 'FFFFFF' } },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        }\n      };\n      summarySheet.getRow(summaryCurrentRow).height = 35;\n      summaryCurrentRow++;\n\n      // Add period tab\n      const periodText = `PERÍODO: ${actualStartDate.toLocaleDateString('pt-BR')} - ${actualEndDate.toLocaleDateString('pt-BR')}`;\n      summarySheet.addRow([periodText]);\n      summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n      summarySheet.getCell(`A${summaryCurrentRow}`).style = {\n        font: { bold: true, size: 12 },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'E7E6E6' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        }\n      };\n      summarySheet.getRow(summaryCurrentRow).height = 25;\n      summaryCurrentRow++;\n\n      // Add empty row\n      summarySheet.addRow([]);\n      summaryCurrentRow++;\n\n      // Headers for detailed transactions in summary\n      summarySheet.addRow(['Vencimento', 'Transacionador', 'Documento', 'Valor']);\n      summarySheet.getRow(summaryCurrentRow).eachCell((cell) => {\n        cell.style = headerStyle;\n      });\n      summaryCurrentRow++;\n\n      // Group all invoices by file for the summary detail\n      for (const [fileName, fileTypes] of Array.from(invoicesByFileAndType)) {\n        // Process both A_PAGAR and A_RECEBER for each file\n        for (const [docType, fileInvoices] of Object.entries(fileTypes)) {\n          if (fileInvoices.length === 0) continue;\n\n          const typeLabel = docType === 'A_PAGAR' ? 'CONTAS A PAGAR' : 'CONTAS A RECEBER';\n          const cleanFileName = fileName.replace(/\\.(csv|CSV)$/, '');\n\n          // Add category header for each file and type\n          summarySheet.addRow([`${typeLabel} - ${cleanFileName}`, '', '', '']);\n          summarySheet.mergeCells(`A${summaryCurrentRow}:D${summaryCurrentRow}`);\n          const categoryRow = summarySheet.getRow(summaryCurrentRow);\n          categoryRow.getCell(1).style = {\n            font: { bold: true, size: 14, color: { argb: 'FFFFFF' } },\n            fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '1F4E79' } },\n            alignment: { horizontal: 'center' as const, vertical: 'middle' as const }\n          };\n          summaryCurrentRow++;\n\n          // Sort and add file invoices to summary\n          fileInvoices.sort((a: any, b: any) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n          let fileTotal = 0;\n          let currentDate = '';\n          let dailyTotal = 0;\n\n        // Process file invoices for summary\n        for (const invoice of fileInvoices) {\n          const invoiceDate = new Date(invoice.date).toLocaleDateString('pt-BR');\n          const invoiceValue = parseFloat(invoice.value);\n\n          // Check if we need to add a daily total for the previous date\n          if (currentDate && currentDate !== invoiceDate && dailyTotal > 0) {\n            summarySheet.addRow(['', '', `TOTAL`, dailyTotal]);\n            const totalRow = summarySheet.getRow(summaryCurrentRow);\n            totalRow.eachCell((cell, colNumber) => {\n              cell.style = {\n                font: { bold: true },\n                fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F2F2F2' } },\n                alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n                border: {\n                  top: { style: 'thin' as const },\n                  left: { style: 'thin' as const },\n                  bottom: { style: 'thin' as const },\n                  right: { style: 'thin' as const }\n                }\n              };\n              if (colNumber === 4) {\n                cell.numFmt = 'R$ #,##0.00';\n              }\n            });\n            summaryCurrentRow++;\n\n            dailyTotal = 0;\n          }\n\n          // If new date, reset daily counters\n          if (currentDate !== invoiceDate) {\n            currentDate = invoiceDate;\n            dailyTotal = 0;\n          }\n\n          // Add invoice row to summary\n          summarySheet.addRow([\n            invoiceDate,\n            invoice.supplier || 'FORNECEDOR NÃO IDENTIFICADO',\n            invoice.invoiceNumber,\n            invoiceValue\n          ]);\n\n          const row = summarySheet.getRow(summaryCurrentRow);\n          row.eachCell((cell, colNumber) => {\n            cell.style = {\n              ...cellStyle,\n              alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined\n            };\n            if (colNumber === 4) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          });\n\n          dailyTotal += invoiceValue;\n          fileTotal += invoiceValue;\n          summaryCurrentRow++;\n        }\n\n        // Add final daily total if there are remaining transactions\n        if (currentDate && dailyTotal > 0) {\n          summarySheet.addRow(['', '', `TOTAL`, dailyTotal]);\n          const totalRow = summarySheet.getRow(summaryCurrentRow);\n          totalRow.eachCell((cell, colNumber) => {\n            cell.style = {\n              font: { bold: true },\n              fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F2F2F2' } },\n              alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n              border: {\n                top: { style: 'thin' as const },\n                left: { style: 'thin' as const },\n                bottom: { style: 'thin' as const },\n                right: { style: 'thin' as const }\n              }\n            };\n            if (colNumber === 4) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          });\n          summaryCurrentRow++;\n        }\n\n        // Add empty row\n          summarySheet.addRow([]);\n          summaryCurrentRow++;\n\n          // Add file category total\n          summarySheet.addRow(['', '', `TOTAL ${typeLabel} - ${cleanFileName}`, fileTotal]);\n          const categoryTotalRow = summarySheet.getRow(summaryCurrentRow);\n          categoryTotalRow.eachCell((cell, colNumber) => {\n            cell.style = {\n              font: { bold: true, color: { argb: 'FFFFFF' } },\n              fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '366092' } },\n              border: {\n                top: { style: 'thin' as const },\n                left: { style: 'thin' as const },\n                bottom: { style: 'thin' as const },\n                right: { style: 'thin' as const }\n              }\n            };\n            if (colNumber === 4) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          });\n          summaryCurrentRow++;\n\n          // Add empty row between types\n          summarySheet.addRow([]);\n          summaryCurrentRow++;\n        }\n      }\n\n\n\n      // Auto-fit columns for summary\n      summarySheet.getColumn(1).width = 15; // Data\n      summarySheet.getColumn(2).width = 60; // Transacionador (maior para legibilidade)\n      summarySheet.getColumn(3).width = 20; // Documento\n      summarySheet.getColumn(4).width = 18; // Valor\n\n      // Create a separate sheet for each file\n      let sheetCounter = 1;\n      const usedSheetNames = new Set<string>();\n\n      for (const [fileName, fileInvoices] of Array.from(invoicesByFile)) {\n        // Clean file name for sheet name (Excel has restrictions)\n        let cleanFileName = fileName.replace(/\\.(csv|CSV)$/, '').replace(/[\\/\\\\\\?\\*\\[\\]]/g, '_').substring(0, 25);\n\n        // Ensure unique sheet name\n        let finalSheetName = cleanFileName;\n        if (usedSheetNames.has(finalSheetName)) {\n          finalSheetName = `${cleanFileName}_${sheetCounter}`;\n          sheetCounter++;\n        }\n\n        // If still too long, truncate further\n        if (finalSheetName.length > 31) {\n          finalSheetName = finalSheetName.substring(0, 31);\n        }\n\n        // Final check for uniqueness\n        while (usedSheetNames.has(finalSheetName)) {\n          const suffix = `_${sheetCounter}`;\n          finalSheetName = cleanFileName.substring(0, 31 - suffix.length) + suffix;\n          sheetCounter++;\n        }\n\n        usedSheetNames.add(finalSheetName);\n        const fileSheet = workbook.addWorksheet(finalSheetName);\n\n        let fileCurrentRow = 1;\n\n        // Add report name header tab to file sheet\n        const fileHeaderText = reportName || fileName.replace(/\\.(csv|CSV)$/, '');\n        fileSheet.addRow([fileHeaderText]);\n        fileSheet.mergeCells(`A${fileCurrentRow}:D${fileCurrentRow}`);\n        fileSheet.getCell(`A${fileCurrentRow}`).style = {\n          font: { bold: true, size: 16, color: { argb: 'FFFFFF' } },\n          fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } },\n          alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n          border: {\n            top: { style: 'thin' as const },\n            left: { style: 'thin' as const },\n            bottom: { style: 'thin' as const },\n            right: { style: 'thin' as const }\n          }\n        };\n        fileSheet.getRow(fileCurrentRow).height = 35;\n        fileCurrentRow++;\n\n        // Calculate individual period for this specific file based on actual document dates\n        const fileDates = fileInvoices.map(inv => new Date(inv.date)).sort((a, b) => a.getTime() - b.getTime());\n        const fileStartDate = fileDates.length > 0 ? fileDates[0] : actualStartDate;\n        const fileEndDate = fileDates.length > 0 ? fileDates[fileDates.length - 1] : actualEndDate;\n\n        // Add period tab to file sheet with individual file period\n        const periodText = `PERÍODO: ${fileStartDate.toLocaleDateString('pt-BR')} - ${fileEndDate.toLocaleDateString('pt-BR')}`;\n        fileSheet.addRow([periodText]);\n        fileSheet.mergeCells(`A${fileCurrentRow}:D${fileCurrentRow}`);\n        fileSheet.getCell(`A${fileCurrentRow}`).style = {\n          font: { bold: true, size: 12 },\n          fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'E7E6E6' } },\n          alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n          border: {\n            top: { style: 'thin' as const },\n            left: { style: 'thin' as const },\n            bottom: { style: 'thin' as const },\n            right: { style: 'thin' as const }\n          }\n        };\n        fileSheet.getRow(fileCurrentRow).height = 25;\n        fileCurrentRow++;\n\n        // Add empty row\n        fileSheet.addRow([]);\n        fileCurrentRow++;\n\n        // Separate invoices by document type for this file\n        const aPagarInvoices = fileInvoices.filter((inv: any) => inv.documentType === 'A_PAGAR');\n        const aReceberInvoices = fileInvoices.filter((inv: any) => inv.documentType === 'A_RECEBER');\n\n        // Calculate totals for each type\n        const totalAPagar = aPagarInvoices.reduce((sum: number, inv: any) => sum + parseFloat(inv.value), 0);\n        const totalAReceber = aReceberInvoices.reduce((sum: number, inv: any) => sum + parseFloat(inv.value), 0);\n\n        // Headers for detailed transactions\n        fileSheet.addRow(['Vencimento', 'Transacionador', 'Documento', 'Valor', '']);\n        fileSheet.getRow(fileCurrentRow).eachCell((cell, colNumber) => {\n          if (colNumber <= 4) {\n            cell.style = headerStyle;\n          }\n        });\n        fileCurrentRow++;\n\n        // Add category header for A_PAGAR\n        const typeLabelAPagar = 'CONTAS A PAGAR';\n        const cleanFileNameAPagar = fileName.replace(/\\.(csv|CSV)$/, '');\n        fileSheet.addRow([`${typeLabelAPagar} - ${cleanFileNameAPagar}`, '', '', '', '']);\n        fileSheet.mergeCells(`A${fileCurrentRow}:E${fileCurrentRow}`);\n        const categoryRowAPagar = fileSheet.getRow(fileCurrentRow);\n        categoryRowAPagar.getCell(1).style = {\n          font: { bold: true, size: 14, color: { argb: 'FFFFFF' } },\n          fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '1F4E79' } },\n          alignment: { horizontal: 'center' as const, vertical: 'middle' as const }\n        };\n        fileCurrentRow++;\n\n        // Sort file invoices by date\n        aPagarInvoices.sort((a: any, b: any) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n        let fileTotalAPagar = 0;\n        let currentDateAPagar = '';\n        let dailyTotalAPagar = 0;\n\n        // Process file invoices for A_PAGAR\n        for (const invoice of aPagarInvoices) {\n          const invoiceDate = new Date(invoice.date).toLocaleDateString('pt-BR');\n          const invoiceValue = parseFloat(invoice.value);\n\n          if (currentDateAPagar && currentDateAPagar !== invoiceDate && dailyTotalAPagar > 0) {\n            fileSheet.addRow(['', '', `TOTAL`, dailyTotalAPagar, '']);\n            const totalRow = fileSheet.getRow(fileCurrentRow);\n            totalRow.eachCell((cell, colNumber) => {\n              if (colNumber <= 4) {\n                cell.style = {\n                  font: { bold: true },\n                  fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F2F2F2' } },\n                  alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n                  border: {\n                    top: { style: 'thin' as const },\n                    left: { style: 'thin' as const },\n                    bottom: { style: 'thin' as const },\n                    right: { style: 'thin' as const }\n                  }\n                };\n                if (colNumber === 4) {\n                  cell.numFmt = 'R$ #,##0.00';\n                }\n              }\n            });\n            fileCurrentRow++;\n            dailyTotalAPagar = 0;\n          }\n\n          if (currentDateAPagar !== invoiceDate) {\n            currentDateAPagar = invoiceDate;\n            dailyTotalAPagar = 0;\n          }\n\n          fileSheet.addRow([\n            invoiceDate,\n            invoice.supplier || 'FORNECEDOR NÃO IDENTIFICADO',\n            invoice.invoiceNumber,\n            `R$ ${invoiceValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`,\n            ''\n          ]);\n\n          const invoiceRow = fileSheet.getRow(fileCurrentRow);\n          invoiceRow.eachCell((cell, colNumber) => {\n            if (colNumber <= 4) {\n              cell.style = {\n                ...cellStyle,\n                alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined\n              };\n            }\n          });\n\n          fileCurrentRow++;\n\n          dailyTotalAPagar += invoiceValue;\n          fileTotalAPagar += invoiceValue;\n        }\n\n        if (currentDateAPagar && dailyTotalAPagar > 0) {\n          fileSheet.addRow(['', '', `TOTAL`, dailyTotalAPagar, '']);\n          const totalRow = fileSheet.getRow(fileCurrentRow);\n          totalRow.eachCell((cell, colNumber) => {\n            if (colNumber <= 4) {\n              cell.style = {\n                font: { bold: true },\n                fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F2F2F2' } },\n                alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n                border: {\n                  top: { style: 'thin' as const },\n                  left: { style: 'thin' as const },\n                  bottom: { style: 'thin' as const },\n                  right: { style: 'thin' as const }\n                }\n              };\n              if (colNumber === 4) {\n                cell.numFmt = 'R$ #,##0.00';\n              }\n            }\n          });\n          fileCurrentRow++;\n        }\n\n        // Add empty row before TOTAL CONTAS A PAGAR\n        fileSheet.addRow([]);\n        fileCurrentRow++;\n\n        // Add category total for A_PAGAR\n        fileSheet.addRow(['', '', 'TOTAL CONTAS A PAGAR', fileTotalAPagar, '']);\n        const categoryTotalRowAPagar = fileSheet.getRow(fileCurrentRow);\n        categoryTotalRowAPagar.eachCell((cell, colNumber) => {\n          if (colNumber <= 4) {\n            cell.style = {\n              font: { bold: true, color: { argb: 'FFFFFF' } },\n              fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '366092' } },\n              border: {\n                top: { style: 'thin' as const },\n                left: { style: 'thin' as const },\n                bottom: { style: 'thin' as const },\n                right: { style: 'thin' as const }\n              }\n            };\n            if (colNumber === 4) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          }\n        });\n        fileCurrentRow++;\n\n        // Add empty row between types\n        fileSheet.addRow([]);\n        fileCurrentRow++;\n\n        // Add category header for A_RECEBER\n        const typeLabelAReceber = 'CONTAS A RECEBER';\n        const cleanFileNameAReceber = fileName.replace(/\\.(csv|CSV)$/, '');\n        fileSheet.addRow([`${typeLabelAReceber} - ${cleanFileNameAReceber}`, '', '', '', '']);\n        fileSheet.mergeCells(`A${fileCurrentRow}:E${fileCurrentRow}`);\n        const categoryRowAReceber = fileSheet.getRow(fileCurrentRow);\n        categoryRowAReceber.getCell(1).style = {\n          font: { bold: true, size: 14, color: { argb: 'FFFFFF' } },\n          fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '1F4E79' } },\n          alignment: { horizontal: 'center' as const, vertical: 'middle' as const }\n        };\n        fileCurrentRow++;\n\n        aReceberInvoices.sort((a: any, b: any) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n        let fileTotalAReceber = 0;\n        let currentDateAReceber = '';\n        let dailyTotalAReceber = 0;\n\n        // Process file invoices for A_RECEBER\n        for (const invoice of aReceberInvoices) {\n          const invoiceDate = new Date(invoice.date).toLocaleDateString('pt-BR');\n          const invoiceValue = parseFloat(invoice.value);\n\n          if (currentDateAReceber && currentDateAReceber !== invoiceDate && dailyTotalAReceber > 0) {\n            fileSheet.addRow(['', '', `TOTAL`, dailyTotalAReceber, '']);\n            const totalRow = fileSheet.getRow(fileCurrentRow);\n            totalRow.eachCell((cell, colNumber) => {\n              if (colNumber <= 4) {\n                cell.style = {\n                  font: { bold: true },\n                  fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F2F2F2' } },\n                  alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n                  border: {\n                    top: { style: 'thin' as const },\n                    left: { style: 'thin' as const },\n                    bottom: { style: 'thin' as const },\n                    right: { style: 'thin' as const }\n                  }\n                };\n                if (colNumber === 4) {\n                  cell.numFmt = 'R$ #,##0.00';\n                }\n              }\n            });\n            fileCurrentRow++;\n            dailyTotalAReceber = 0;\n          }\n\n          if (currentDateAReceber !== invoiceDate) {\n            currentDateAReceber = invoiceDate;\n            dailyTotalAReceber = 0;\n          }\n\n          fileSheet.addRow([\n            invoiceDate,\n            invoice.supplier || 'FORNECEDOR NÃO IDENTIFICADO',\n            invoice.invoiceNumber,\n            `R$ ${invoiceValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`,\n            ''\n          ]);\n\n          const invoiceRow = fileSheet.getRow(fileCurrentRow);\n          invoiceRow.eachCell((cell, colNumber) => {\n            if (colNumber <= 4) {\n              cell.style = {\n                ...cellStyle,\n                alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined\n              };\n            }\n          });\n\n          fileCurrentRow++;\n\n          dailyTotalAReceber += invoiceValue;\n          fileTotalAReceber += invoiceValue;\n        }\n\n        if (currentDateAReceber && dailyTotalAReceber > 0) {\n          fileSheet.addRow(['', '', `TOTAL`, dailyTotalAReceber, '']);\n          const totalRow = fileSheet.getRow(fileCurrentRow);\n          totalRow.eachCell((cell, colNumber) => {\n            if (colNumber <= 4) {\n              cell.style = {\n                font: { bold: true },\n                fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F2F2F2' } },\n                alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n                border: {\n                  top: { style: 'thin' as const },\n                  left: { style: 'thin' as const },\n                  bottom: { style: 'thin' as const },\n                  right: { style: 'thin' as const }\n                }\n              };\n              if (colNumber === 4) {\n                cell.numFmt = 'R$ #,##0.00';\n              }\n            }\n          });\n          fileCurrentRow++;\n        }\n\n        // Add empty row before TOTAL CONTAS A RECEBER\n        fileSheet.addRow([]);\n        fileCurrentRow++;\n\n        // Add TOTAL CONTAS A RECEBER\n        fileSheet.addRow(['', '', 'TOTAL CONTAS A RECEBER', fileTotalAReceber, '']);\n        const totalGeralAReceberRow = fileSheet.getRow(fileCurrentRow);\n        totalGeralAReceberRow.eachCell((cell, colNumber) => {\n          if (colNumber <= 4) {\n            cell.style = {\n              font: { bold: true, color: { argb: 'FFFFFF' } },\n              fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '366092' } },\n              alignment: colNumber === 3 ? { horizontal: 'center' as const, vertical: 'middle' as const } : undefined,\n              border: {\n                top: { style: 'thin' as const },\n                left: { style: 'thin' as const },\n                bottom: { style: 'thin' as const },\n                right: { style: 'thin' as const }\n              }\n            };\n            if (colNumber === 4) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          }\n        });\n        fileCurrentRow++;\n\n        // Add empty row\n        fileSheet.addRow([]);\n        fileCurrentRow++;\n\n\n\n        // Auto-fit columns for file sheet\n        fileSheet.getColumn(1).width = 15; // Data\n        fileSheet.getColumn(2).width = 60; // Transacionador (maior para legibilidade)\n        fileSheet.getColumn(3).width = 20; // Documento\n        fileSheet.getColumn(4).width = 18; // Valor\n        fileSheet.getColumn(5).width = 5; // Empty column\n      }\n\n      // Set response headers for file download\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"relatorio_detalhado_${new Date().toISOString().split('T')[0]}.xlsx\"`);\n\n      // Write to response\n      await workbook.xlsx.write(res);\n      res.end();\n\n    } catch (error) {\n      console.error('Error generating Excel:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Erro ao gerar arquivo Excel\"\n      });\n    }\n  });\n\n  // Removed incomplete /api/upload-csv-summary route that was causing structural corruption\n          if (cleanValue.startsWith('(') && cleanValue.endsWith(')')) {\n            isNegative = true;\n            cleanValue = cleanValue.slice(1, -1);\n          }\n          \n          // Remove currency symbols and spaces\n          cleanValue = cleanValue.replace(/[R$\\s()]/g, '');\n          \n          // Handle explicit negative sign\n          if (cleanValue.startsWith('-')) {\n            isNegative = true;\n            cleanValue = cleanValue.substring(1);\n          }\n          \n          // Enhanced Brazilian number format handling\n          if (cleanValue.includes(',') && cleanValue.includes('.')) {\n            // Format: 1.234.567,89 (standard Brazilian - dots as thousand separators, comma as decimal)\n            const lastCommaIndex = cleanValue.lastIndexOf(',');\n            const lastDotIndex = cleanValue.lastIndexOf('.');\n            \n            if (lastCommaIndex > lastDotIndex) {\n              // Comma is decimal separator: 1.234.567,89\n              cleanValue = cleanValue.replace(/\\./g, '').replace(',', '.');\n            } else {\n              // Dot is decimal separator: 1,234,567.89 (unusual but possible)\n              cleanValue = cleanValue.replace(/,/g, '');\n            }\n          } else if (cleanValue.includes(',') && !cleanValue.includes('.')) {\n            // Format: 1234567,89 or 123,45 (comma as decimal separator)\n            const commaParts = cleanValue.split(',');\n            if (commaParts.length === 2 && commaParts[1].length <= 2) {\n              // Likely decimal comma\n              cleanValue = cleanValue.replace(',', '.');\n            } else {\n              // Multiple commas - treat as thousand separators (unusual)\n              cleanValue = cleanValue.replace(/,/g, '');\n            }\n          } else if (cleanValue.includes('.') && !cleanValue.includes(',')) {\n            // Format with only dots\n            const dotParts = cleanValue.split('.');\n            if (dotParts.length === 2 && dotParts[1].length <= 2) {\n              // Likely decimal point: 1234567.89\n              // Keep as is\n            } else {\n              // Multiple dots - likely thousand separators: 1.234.567\n              cleanValue = cleanValue.replace(/\\./g, '');\n            }\n          }\n          \n          const result = parseFloat(cleanValue) || 0;\n          return isNegative ? -result : result;\n        };\n\n        // Enhanced total extraction with comprehensive search strategies\n        console.log(`Starting total extraction for ${branchName}...`);\n        \n        // First calculate totals from individual transactions as fallback\n        let calculatedAPagar = 0;\n        let calculatedAReceber = 0;\n        \n        // Calculate from individual transactions first\n        for (const [, total] of documentDates.entries()) {\n          calculatedAPagar += total; // Assume all are A PAGAR unless specified otherwise\n        }\n        \n        console.log(`Calculated total from transactions: ${calculatedAPagar}`);\n        \n        // Now look for explicit total lines\n        for (let i = 0; i < rows.length; i++) {\n          const row = rows[i];\n          if (!Array.isArray(row) || row.length === 0) continue;\n\n          // Convert entire row to string for easier searching\n          const rowText = row.join(' ').toUpperCase().replace(/\\s+/g, ' ').trim();\n          \n          console.log(`Row ${i}: \"${rowText}\"`);\n          \n          // Enhanced TOTAL CONTAS A PAGAR detection with more patterns\n          const isAPagarTotalRow = \n            rowText.includes('TOTAL CONTAS A PAGAR') || \n            rowText.includes('TOTALCONTASAPAGAR') ||\n            rowText.includes('TOTAL A PAGAR') ||\n            rowText.includes('TOTALPAGAR') ||\n            (rowText.includes('TOTAL') && rowText.includes('PAGAR') && !rowText.includes('RECEBER')) ||\n            rowText.match(/TOTAL.*A.*PAGAR/) ||\n            rowText.match(/TOTAL.*PAGAR/) ||\n            // Look for patterns where TOTAL is in one column and value in another\n            (row.some(cell => cell?.toString().toUpperCase().includes('TOTAL')) && \n             row.some(cell => cell?.toString().toUpperCase().includes('PAGAR')));\n          \n          if (isAPagarTotalRow) {\n            console.log(`Found potential A PAGAR total row at ${i}: \"${rowText}\"`);\n            \n            // Enhanced value extraction strategies\n            let foundValue = null;\n            \n            // Strategy 1: Look for monetary values in the same row\n            for (let k = 0; k < row.length; k++) {\n              const cellValue = row[k]?.toString().trim() || '';\n              if (isMonetaryValue(cellValue)) {\n                const value = parseMonetaryValue(cellValue);\n                if (value > 0) {\n                  console.log(`Strategy 1 - Found A PAGAR value in row ${i} col ${k}: ${value} from \"${cellValue}\"`);\n                  foundValue = value;\n                  break;\n                }\n              }\n            }\n            \n            // Strategy 2: Look in next few rows if not found in same row\n            if (!foundValue) {\n              for (let rowOffset = 1; rowOffset <= 5; rowOffset++) {\n                const checkRow = rows[i + rowOffset];\n                if (!checkRow || !Array.isArray(checkRow)) continue;\n                \n                for (let k = 0; k < checkRow.length; k++) {\n                  const cellValue = checkRow[k]?.toString().trim() || '';\n                  if (isMonetaryValue(cellValue)) {\n                    const value = parseMonetaryValue(cellValue);\n                    if (value > 0) {\n                      console.log(`Strategy 2 - Found A PAGAR value at row ${i + rowOffset} col ${k}: ${value} from \"${cellValue}\"`);\n                      foundValue = value;\n                      break;\n                    }\n                  }\n                }\n                if (foundValue) break;\n              }\n            }\n            \n            // Strategy 3: Look for specific CSV patterns (col2=TOTAL, col3=value)\n            if (!foundValue && row.length >= 4) {\n              const col2Text = row[2]?.toString().toUpperCase().trim() || '';\n              const col3Value = row[3]?.toString().trim() || '';\n              \n              if (col2Text.includes('TOTAL') && isMonetaryValue(col3Value)) {\n                const value = parseMonetaryValue(col3Value);\n                if (value > 0) {\n                  console.log(`Strategy 3 - Found A PAGAR value using CSV pattern: ${value} from \"${col3Value}\"`);\n                  foundValue = value;\n                }\n              }\n            }\n            \n            if (foundValue && foundValue > totalAPagar) {\n              totalAPagar = foundValue;\n              console.log(`Set totalAPagar to: ${totalAPagar}`);\n            }\n          }\n\n          // Enhanced TOTAL CONTAS A RECEBER detection with more patterns\n          const isAReceberTotalRow = \n            rowText.includes('TOTAL CONTAS A RECEBER') ||\n            rowText.includes('TOTALCONTASARECEBER') ||\n            rowText.includes('TOTAL A RECEBER') ||\n            rowText.includes('TOTALRECEBER') ||\n            (rowText.includes('TOTAL') && rowText.includes('RECEBER') && !rowText.includes('PAGAR')) ||\n            rowText.match(/TOTAL.*A.*RECEBER/) ||\n            rowText.match(/TOTAL.*RECEBER/) ||\n            // Look for patterns where TOTAL is in one column and value in another\n            (row.some(cell => cell?.toString().toUpperCase().includes('TOTAL')) && \n             row.some(cell => cell?.toString().toUpperCase().includes('RECEBER')));\n          \n          if (isAReceberTotalRow) {\n            console.log(`Found potential A RECEBER total row at ${i}: \"${rowText}\"`);\n            \n            // Enhanced value extraction strategies for A RECEBER\n            let foundValue = null;\n            \n            // Strategy 1: Look for monetary values in the same row\n            for (let k = 0; k < row.length; k++) {\n              const cellValue = row[k]?.toString().trim() || '';\n              if (isMonetaryValue(cellValue)) {\n                const value = parseMonetaryValue(cellValue);\n                if (value >= 0) { // Allow 0 for A RECEBER\n                  console.log(`Strategy 1 - Found A RECEBER value in row ${i} col ${k}: ${value} from \"${cellValue}\"`);\n                  foundValue = value;\n                  break;\n                }\n              }\n            }\n            \n            // Strategy 2: Look in next few rows if not found in same row\n            if (foundValue === null) {\n              for (let rowOffset = 1; rowOffset <= 5; rowOffset++) {\n                const checkRow = rows[i + rowOffset];\n                if (!checkRow || !Array.isArray(checkRow)) continue;\n                \n                for (let k = 0; k < checkRow.length; k++) {\n                  const cellValue = checkRow[k]?.toString().trim() || '';\n                  if (isMonetaryValue(cellValue)) {\n                    const value = parseMonetaryValue(cellValue);\n                    if (value >= 0) {\n                      console.log(`Strategy 2 - Found A RECEBER value at row ${i + rowOffset} col ${k}: ${value} from \"${cellValue}\"`);\n                      foundValue = value;\n                      break;\n                    }\n                  }\n                }\n                if (foundValue !== null) break;\n              }\n            }\n            \n            // Strategy 3: Look for specific CSV patterns\n            if (foundValue === null && row.length >= 4) {\n              const col2Text = row[2]?.toString().toUpperCase().trim() || '';\n              const col3Value = row[3]?.toString().trim() || '';\n              \n              if (col2Text.includes('TOTAL') && isMonetaryValue(col3Value)) {\n                const value = parseMonetaryValue(col3Value);\n                if (value >= 0) {\n                  console.log(`Strategy 3 - Found A RECEBER value using CSV pattern: ${value} from \"${col3Value}\"`);\n                  foundValue = value;\n                }\n              }\n            }\n            \n            if (foundValue !== null && foundValue >= totalAReceber) {\n              totalAReceber = foundValue;\n              console.log(`Set totalAReceber to: ${totalAReceber}`);\n            }\n          }\n        }\n        \n        // If no explicit totals found, use calculated totals from individual transactions\n        if (totalAPagar === 0 && calculatedAPagar > 0) {\n          totalAPagar = calculatedAPagar;\n          console.log(`Using calculated A PAGAR total: ${totalAPagar}`);\n        }\n\n          // Process rows to extract document dates and values with improved parsing\n          if (Array.isArray(row) && row.length > 0) {\n            const firstCell = row[0]?.toString().trim() || '';\n\n            // Skip empty rows, section headers\n            if (!firstCell || \n                firstCell.toLowerCase().includes('período') ||\n                firstCell.toLowerCase().includes('vencimento') ||\n                firstCell.toLowerCase().includes('transacionador') ||\n                firstCell.toLowerCase().includes('contas a pagar') ||\n                firstCell.toLowerCase().includes('contas a receber') ||\n                firstCell === ';;;;' ||\n                firstCell === '') {\n              continue;\n            }\n\n            // Skip TOTAL rows\n            if (firstCell.toLowerCase().includes('total')) {\n              continue;\n            }\n\n            // Check if first cell contains a date (DD/MM/YYYY format)\n            const dateMatch = firstCell.match(/^(\\d{1,2}\\/\\d{1,2}\\/\\d{4})$/);\n            if (dateMatch && row.length >= 4) {\n              const transactionDate = dateMatch[1];\n              const supplier = row[1]?.toString().trim() || '';\n              const document = row[2]?.toString().trim() || '';\n              const valueText = row[3]?.toString().trim() || '';\n\n              // Skip if it's just a date header without transaction data\n              if (!supplier || !document || !valueText) {\n                console.log(`Skipping date-only row: ${transactionDate}`);\n                continue;\n              }\n\n              // Parse the value with improved handling\n              if (valueText.match(/^[R$\\s\\-]*[\\d.,]+$/) || valueText.match(/^\\d{1,3}(\\.\\d{3})*,\\d{2}$/) || valueText.match(/^\\d+,\\d{2}$/)) {\n                let cleanValue = valueText.replace(/[R$\\s]/g, '');\n\n                // Handle different Brazilian number formats\n                if (cleanValue.includes(',') && cleanValue.includes('.')) {\n                  // Format: 1.234.567,89 (standard Brazilian)\n                  cleanValue = cleanValue.replace(/\\./g, '').replace(',', '.');\n                } else if (cleanValue.includes(',')) {\n                  // Format: 1234567,89 or 123,45\n                  cleanValue = cleanValue.replace(',', '.');\n                } else if (cleanValue.includes('.') && cleanValue.split('.').length > 2) {\n                  // Format: 1.234.567 (no cents, thousand separators)\n                  cleanValue = cleanValue.replace(/\\./g, '');\n                }\n\n                const value = parseFloat(cleanValue);\n\n                if (!isNaN(value) && value > 0) {\n                  if (!documentDates.has(transactionDate)) {\n                    documentDates.set(transactionDate, 0);\n                  }\n                  documentDates.set(transactionDate, documentDates.get(transactionDate)! + value);\n                  console.log(`Found transaction: ${transactionDate} = R$ ${value} (${supplier} - ${document})`);\n                }\n              }\n            }\n          }\n        }\n\n\n\n        console.log(`Final results - Branch: ${branchName}, A Pagar: ${totalAPagar}, A Receber: ${totalAReceber}`);\n\n        branches.push({\n          name: branchName,\n          totalAPagar,\n          totalAReceber,\n          total: totalAPagar + totalAReceber\n        });\n\n        grandTotalAPagar += totalAPagar;\n        grandTotalAReceber += totalAReceber;\n      }\n\n      // Log final processing results\n      console.log(`Processing complete. Found ${documentDates.size} unique transaction dates across all files.`);\n      if (documentDates.size > 0) {\n        console.log(`Transaction dates found:`, Array.from(documentDates.entries()).map(([date, total]) => `${date}: R$ ${total.toFixed(2)}`));\n      } else {\n        console.log('No individual transaction dates were found. This might indicate a parsing issue.');\n      }\n\n      // Convert dailyTotals map to array for frontend\n      const dailyTotalsArray = Array.from(dailyTotals.entries()).map(([day, total]) => ({\n        day,\n        total\n      }));\n\n      // Convert documentDates map to array for frontend, sorted by date with enhanced day identification\n          const documentDatesArray = Array.from(documentDates.entries())\n            .map(([dateStr, total]) => {\n              const dateInfo = parseDateAndGetDayOfWeek(dateStr);\n\n              return {\n                day: dateStr,\n                dayOfWeek: dateInfo.dayOfWeek,\n                total,\n                sortDate: dateInfo.date,\n                isValid: dateInfo.isValid\n              };\n            })\n            .filter(({ isValid, sortDate }) => {\n              if (!isValid) return false;\n              // Include only working days (Monday to Friday)\n              const dayOfWeekNum = sortDate.getDay();\n              return dayOfWeekNum >= 1 && dayOfWeekNum <= 5;\n            })\n            .sort((a, b) => a.sortDate.getTime() - b.sortDate.getTime())\n            .map(({ day, dayOfWeek, total }) => ({ day, dayOfWeek, total }));\n\n      // Group by specific dates - consolidate all transactions for the same date across all files\n          const dateSpecificTotals = new Map<string, number>();\n\n          // First, consolidate from documentDates (which contains individual date totals)\n          for (const [dateStr, total] of documentDates.entries()) {\n            if (!dateSpecificTotals.has(dateStr)) {\n              dateSpecificTotals.set(dateStr, 0);\n            }\n            dateSpecificTotals.set(dateStr, dateSpecificTotals.get(dateStr)! + total);\n          }\n\n          // If no document dates found, try to extract from branch totals by distributing evenly\n        if (dateSpecificTotals.size === 0 && (grandTotalAPagar > 0 || grandTotalAReceber > 0)) {\n          // Create a default date entry for the current processing date\n          const currentDate = new Date().toLocaleDateString('pt-BR');\n          const totalValue = grandTotalAPagar + grandTotalAReceber;\n          if (totalValue > 0) {\n            dateSpecificTotals.set(currentDate, totalValue);\n            console.log(`No individual dates found, using current date ${currentDate} with total ${totalValue}`);\n          }\n        }\n\n          // Convert to array sorted by date\n          const dateSpecificTotalsArray = Array.from(dateSpecificTotals.entries())\n            .map(([dateStr, total]) => {\n              // Parse Brazilian date format DD/MM/YYYY\n              const dateParts = dateStr.split('/');\n              if (dateParts.length === 3) {\n                const day = parseInt(dateParts[0]);\n                const month = parseInt(dateParts[1]);\n                const year = parseInt(dateParts[2]);\n                const sortDate = new Date(year, month - 1, day);\n                return {\n                  day: dateStr,\n                  total,\n                  sortDate,\n                  isValid: !isNaN(sortDate.getTime())\n                };\n              }\n              return {\n                day: dateStr,\n                total,\n                sortDate: new Date(),\n                isValid: false\n              };\n            })\n            .filter(item => item.isValid) // Only include valid dates\n            .sort((a, b) => a.sortDate.getTime() - b.sortDate.getTime())\n            .map(({ day, total }) => ({ day, total }));\n\n          console.log(`Final dateSpecificTotalsArray contains ${dateSpecificTotalsArray.length} dates:`, dateSpecificTotalsArray);\n\n      // Calculate grand total from dateSpecificTotals to ensure consistency\n      const grandTotalFromDates = dateSpecificTotalsArray.reduce((sum, item) => sum + item.total, 0);\n\n      const summaryData = {\n        branches,\n        dailyTotals: dailyTotalsArray,\n        documentDates: documentDatesArray, // Use actual document dates instead of weekday totals\n        dateSpecificTotals: dateSpecificTotalsArray, // Add date-specific totals for organized display\n        grandTotal: grandTotalFromDates, // Use total from actual transaction dates\n        grandTotalAPagar,\n        grandTotalAReceber,\n        totalAPagar: grandTotalAPagar // Add this for Excel compatibility\n      };\n\n      // Store summary data in storage for Excel export\n      storage['summaryData'] = summaryData;\n\n      res.json({\n        success: true,\n        message: `${files.length} arquivo(s) processado(s) com sucesso`,\n        data: summaryData\n      });\n\n    } catch (error) {\n      console.error('Error processing CSV summary:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Erro interno do servidor ao processar os arquivos\"\n      });\n    }\n  });\n\n  // Generate and download summary Excel file\n  app.get(\"/api/export-summary-excel\", async (req, res) => {\n    try {\n      const summaryData = storage['summaryData'];\n\n      if (!summaryData || !summaryData.branches || summaryData.branches.length === 0) {\n        return res.status(404).json({\n          success: false,\n          message: \"Nenhum dado de resumo para exportar. Processe os arquivos CSV primeiro.\"\n        });\n      }\n\n      // Create Excel workbook\n      const workbook = new ExcelJS.Workbook();\n      const sheet = workbook.addWorksheet('Resumo Total das Filiais');\n\n      // Header styling - all in consistent blue\n      const headerStyle = {\n        font: { bold: true, color: { argb: 'FFFFFF' } },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        }\n      };\n\n      const cellStyle = {\n        border: {\n          top: { style: 'thin' as const },\n          left: { style: 'thin' as const },\n          bottom: { style: 'thin' as const },\n          right: { style: 'thin' as const }\n        },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'F8F9FA' } }\n      };\n\n      const titleStyle = {\n        font: { bold: true, size: 16, color: { argb: 'FFFFFF' } },\n        alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n        fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } }\n      };\n\n      let currentRow = 1;\n\n      // Add title\n      sheet.addRow(['RESUMO TOTAL DAS FILIAIS', '', '']);\n      sheet.mergeCells(`A${currentRow}:C${currentRow}`);\n      sheet.getCell(`A${currentRow}`).style = titleStyle;\n      sheet.getRow(currentRow).height = 35;\n      currentRow++;\n\n      // Add empty row\n      sheet.addRow(['', '', '']);\n      currentRow++;\n\n      // Add headers\n      sheet.addRow(['Filial', 'Total A Pagar', '']);\n      sheet.getRow(currentRow).eachCell((cell, colNumber) => {\n        if (colNumber <= 2) {\n          cell.style = headerStyle;\n        }\n      });\n      currentRow++;\n\n      // Add branch data\n      for (const branch of summaryData.branches) {\n        sheet.addRow([\n          branch.name,\n          branch.totalAPagar,\n          ''\n        ]);\n\n        const row = sheet.getRow(currentRow);\n        row.eachCell((cell, colNumber) => {\n          if (colNumber <= 2) {\n            cell.style = cellStyle;\n            if (colNumber === 2) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          }\n        });\n        currentRow++;\n      }\n\n      // Use dateSpecificTotals which consolidates all transaction dates correctly\n      const finalDateTotals = summaryData.dateSpecificTotals && summaryData.dateSpecificTotals.length > 0 \n        ? summaryData.dateSpecificTotals \n        : summaryData.documentDates || [];\n\n      // Add consolidated date totals section\n      if (finalDateTotals && finalDateTotals.length > 0) {\n        // Add empty rows\n        sheet.addRow([]);\n        currentRow++;\n        sheet.addRow([]);\n        currentRow++;\n\n        // Add consolidated dates section header\n        sheet.addRow(['TOTAL GERAL', '', '']);\n        sheet.mergeCells(`A${currentRow}:C${currentRow}`);\n        sheet.getCell(`A${currentRow}`).style = {\n          font: { bold: true, size: 14, color: { argb: 'FFFFFF' } },\n          alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n          fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } },\n          border: {\n            top: { style: 'thin' as const },\n            left: { style: 'thin' as const },\n            bottom: { style: 'thin' as const },\n            right: { style: 'thin' as const }\n          }\n        };\n        sheet.getRow(currentRow).height = 30;\n        currentRow++;\n\n        // Add empty row\n        sheet.addRow(['', '', '']);\n        currentRow++;\n\n        // Add consolidated dates data headers\n        sheet.addRow(['Data', 'Total', '']);\n        sheet.getRow(currentRow).eachCell((cell, colNumber) => {\n          if (colNumber <= 2) {\n            cell.style = headerStyle;\n          }\n        });\n        currentRow++;\n\n        let consolidatedGrandTotal = 0;\n\n        // Add consolidated date data - sort by date to ensure proper order\n        const sortedDateTotals = [...finalDateTotals].sort((a, b) => {\n          // Parse Brazilian date format DD/MM/YYYY for sorting\n          const parseDate = (dateStr: string) => {\n            const parts = dateStr.split('/');\n            if (parts.length === 3) {\n              return new Date(parseInt(parts[2]), parseInt(parts[1]) - 1, parseInt(parts[0]));\n            }\n            return new Date(dateStr);\n          };\n\n          return parseDate(a.day).getTime() - parseDate(b.day).getTime();\n        });\n\n        for (const dateData of sortedDateTotals) {\n          // Parse date and get day of week\n          const parts = dateData.day.split('/');\n          let dayOfWeek = '';\n          if (parts.length === 3) {\n            const date = new Date(parseInt(parts[2]), parseInt(parts[1]) - 1, parseInt(parts[0]));\n            dayOfWeek = format(date, 'EEEE', { locale: ptBR });\n          }\n          \n          const dateWithDay = dayOfWeek ? `${dateData.day} (${dayOfWeek})` : dateData.day;\n          \n          sheet.addRow([\n            dateWithDay,\n            dateData.total,\n            ''\n          ]);\n\n          const row = sheet.getRow(currentRow);\n          row.eachCell((cell, colNumber) => {\n            if (colNumber <= 2) {\n              cell.style = cellStyle;\n              if (colNumber === 2) {\n                cell.numFmt = 'R$ #,##0.00';\n              }\n            }\n          });\n          consolidatedGrandTotal += dateData.total;\n          currentRow++;\n        }\n\n        // Add consolidated dates total\n        sheet.addRow(['TOTAL GERAL', consolidatedGrandTotal, '']);\n        const consolidatedTotalRow = sheet.getRow(currentRow);\n        consolidatedTotalRow.eachCell((cell, colNumber) => {\n          if (colNumber <= 2) {\n            cell.style = {\n              font: { bold: true, color: { argb: 'FFFFFF' } },\n              fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } },\n              border: {\n                top: { style: 'thin' as const },\n                left: { style: 'thin' as const },\n                bottom: { style: 'thin' as const },\n                right: { style: 'thin' as const }\n              },\n              alignment: { horizontal: 'center' as const, vertical: 'middle' as const }\n            };\n            if (colNumber === 2) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          }\n        });\n        sheet.getRow(currentRow).height = 25;\n        currentRow++;\n      }\n\n      // Add daily totals section if available\n      if (summaryData.dailyTotals && summaryData.dailyTotals.length > 0) {\n        // Add empty rows\n        sheet.addRow([]);\n        currentRow++;\n        sheet.addRow([]);\n        currentRow++;\n\n        // Add daily totals header\n        sheet.addRow(['OUTROS TOTAIS POR DIA', '', '']);\n        sheet.mergeCells(`A${currentRow}:C${currentRow}`);\n        sheet.getCell(`A${currentRow}`).style = {\n          font: { bold: true, size: 14, color: { argb: 'FFFFFF' } },\n          alignment: { horizontal: 'center' as const, vertical: 'middle' as const },\n          fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } }\n        };\n        currentRow++;\n\n        // Add empty row\n        sheet.addRow(['', '', '']);\n        currentRow++;\n\n        // Add daily data headers\n        sheet.addRow(['Dia', 'Total', '']);\n        sheet.getRow(currentRow).eachCell((cell, colNumber) => {\n          if (colNumber <= 2) {\n            cell.style = headerStyle;\n          }\n        });\n        currentRow++;\n\n        // Add daily data\n        for (const daily of summaryData.dailyTotals) {\n          sheet.addRow([\n            daily.day,\n            daily.total,\n            ''\n          ]);\n\n          const row = sheet.getRow(currentRow);\n          row.eachCell((cell, colNumber) => {\n            if (colNumber <= 2) {\n              cell.style = cellStyle;\n              if (colNumber === 2) {\n                cell.numFmt = 'R$ #,##0.00';\n              }\n            }\n          });\n          currentRow++;\n        }\n\n        // Add daily totals sum\n        const dailyGrandTotal = summaryData.dailyTotals.reduce((sum: number, daily: any) => sum + daily.total, 0);\n        sheet.addRow(['TOTAL DOS DIAS', dailyGrandTotal, '']);\n        const dailyTotalRow = sheet.getRow(currentRow);\n        dailyTotalRow.eachCell((cell, colNumber) => {\n          if (colNumber <= 2) {\n            cell.style = {\n              font: { bold: true, color: { argb: 'FFFFFF' } },\n              fill: { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: '2F5597' } },\n              border: {\n                top: { style: 'thin' as const },\n                left: { style: 'thin' as const },\n                bottom: { style: 'thin' as const },\n                right: { style: 'thin' as const }\n              }\n            };\n            if (colNumber === 2) {\n              cell.numFmt = 'R$ #,##0.00';\n            }\n          }\n        });\n        currentRow++;\n      }\n\n      // Removed the final TOTAL GERAL section as requested\n\n      // Set column widths\n      sheet.getColumn(1).width = 30; // Filial\n      sheet.getColumn(2).width = 20; // Total A Pagar\n      sheet.getColumn(3).width = 5; // Empty column for spacing\n\n      // Set response headers for file download\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"resumo_total_filiais_${new Date().toISOString().split('T')[0]}.xlsx\"`);\n\n      // Write to response\n      await workbook.xlsx.write(res);\n      res.end();\n\n    } catch (error) {\n      console.error('Error generating summary Excel:', error);\n      res.status(500).json({\n        success: false,\n        message: \"Erro ao gerar arquivo Excel de resumo\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":74982},"server/storage.ts":{"content":"import { type Invoice, type InsertInvoice, type BranchSummary, type InsertBranchSummary, type DailySummary, type InsertDailySummary, type ProcessedData } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Invoice operations\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  getInvoicesByWeek(weekStart: Date, weekEnd: Date): Promise<Invoice[]>;\n  clearInvoices(): Promise<void>;\n\n  // Branch summary operations\n  createBranchSummary(summary: InsertBranchSummary): Promise<BranchSummary>;\n  getBranchSummariesByWeek(weekStart: Date, weekEnd: Date): Promise<BranchSummary[]>;\n  getBranchSummariesByBranch(branchName: string): Promise<BranchSummary[]>;\n  updateBranchSummary(id: string, updates: Partial<BranchSummary>): Promise<BranchSummary | null>;\n  clearBranchSummaries(): Promise<void>;\n\n  // Daily summary operations\n  createDailySummary(summary: InsertDailySummary): Promise<DailySummary>;\n  getDailySummariesByWeek(weekStart: Date, weekEnd: Date): Promise<DailySummary[]>;\n  clearDailySummaries(): Promise<void>;\n\n  // Processing operations\n  setProcessingState(isProcessing: boolean): void;\n  getProcessingState(): boolean;\n\n  // Clear all data\n  clearAllData(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  public invoices: Map<string, Invoice>;\n  public branchSummaries: Map<string, BranchSummary>;\n  public dailySummaries: Map<string, DailySummary>;\n  public summaryData: any;\n  private isProcessing: boolean;\n\n  constructor() {\n    this.invoices = new Map();\n    this.branchSummaries = new Map();\n    this.dailySummaries = new Map();\n    this.summaryData = null;\n    this.isProcessing = false;\n  }\n\n  async createInvoice(insertInvoice: InsertInvoice): Promise<Invoice> {\n    const id = randomUUID();\n    const invoice: Invoice = {\n      ...insertInvoice,\n      id,\n      supplier: insertInvoice.supplier || null,\n      sourceFile: insertInvoice.sourceFile || null,\n      documentType: insertInvoice.documentType || 'A_PAGAR'\n    };\n    this.invoices.set(id, invoice);\n    return invoice;\n  }\n\n  async getInvoicesByWeek(weekStart: Date, weekEnd: Date): Promise<Invoice[]> {\n    return Array.from(this.invoices.values()).filter(\n      invoice => invoice.weekStart >= weekStart && invoice.weekEnd <= weekEnd\n    );\n  }\n\n  async clearInvoices(): Promise<void> {\n    this.invoices.clear();\n  }\n\n  async createBranchSummary(insertSummary: InsertBranchSummary): Promise<BranchSummary> {\n    const id = randomUUID();\n    const summary: BranchSummary = {\n      ...insertSummary,\n      id,\n      invoiceCount: insertSummary.invoiceCount || 0,\n      totalValue: insertSummary.totalValue || \"0\"\n    };\n    this.branchSummaries.set(id, summary);\n    return summary;\n  }\n\n  async getBranchSummariesByWeek(weekStart: Date, weekEnd: Date): Promise<BranchSummary[]> {\n    return Array.from(this.branchSummaries.values()).filter(\n      summary => summary.weekStart >= weekStart && summary.weekEnd <= weekEnd\n    );\n  }\n\n  async getBranchSummariesByBranch(branchName: string): Promise<BranchSummary[]> {\n    return Array.from(this.branchSummaries.values()).filter(\n      summary => summary.branch === branchName\n    );\n  }\n\n  async updateBranchSummary(id: string, updates: Partial<BranchSummary>): Promise<BranchSummary | null> {\n    const existing = this.branchSummaries.get(id);\n    if (!existing) return null;\n\n    const updated = { ...existing, ...updates };\n    this.branchSummaries.set(id, updated);\n    return updated;\n  }\n\n  async clearBranchSummaries(): Promise<void> {\n    this.branchSummaries.clear();\n  }\n\n  async createDailySummary(insertSummary: InsertDailySummary & { branch?: string }): Promise<DailySummary> {\n    const id = randomUUID();\n    const summary: DailySummary = {\n      ...insertSummary,\n      id,\n      branch: insertSummary.branch || null,\n      invoiceCount: insertSummary.invoiceCount || 0,\n      totalValue: insertSummary.totalValue || \"0\"\n    };\n    this.dailySummaries.set(id, summary);\n    return summary;\n  }\n\n  async getDailySummariesByWeek(weekStart: Date, weekEnd: Date): Promise<DailySummary[]> {\n    return Array.from(this.dailySummaries.values()).filter(\n      summary => summary.date >= weekStart && summary.date <= weekEnd\n    );\n  }\n\n  async clearDailySummaries(): Promise<void> {\n    this.dailySummaries.clear();\n  }\n\n  async getProcessedData(periodStart: Date, periodEnd: Date): Promise<ProcessedData | null> {\n    // Get all invoices to work with individual document periods\n    const allInvoices = Array.from(this.invoices.values());\n\n    if (allInvoices.length === 0) {\n      return null;\n    }\n\n    // Group invoices by their individual document periods (by branch summary periods)\n    const branchPeriods = new Map<string, { start: Date; end: Date; invoices: typeof allInvoices }>();\n    \n    // Get all branch summaries to understand individual document periods\n    const allBranchSummaries = Array.from(this.branchSummaries.values());\n    \n    for (const summary of allBranchSummaries) {\n      const key = `${summary.branch}_${summary.weekStart.getTime()}_${summary.weekEnd.getTime()}`;\n      if (!branchPeriods.has(key)) {\n        branchPeriods.set(key, {\n          start: summary.weekStart,\n          end: summary.weekEnd,\n          invoices: allInvoices.filter(inv => \n            inv.branch === summary.branch && \n            inv.date >= summary.weekStart && \n            inv.date <= summary.weekEnd\n          )\n        });\n      }\n    }\n\n    // If no individual periods found, calculate from all invoice dates\n    if (branchPeriods.size === 0) {\n      const invoiceDates = allInvoices.map(inv => new Date(inv.date)).sort((a, b) => a.getTime() - b.getTime());\n      const actualStartDate = invoiceDates[0];\n      const actualEndDate = invoiceDates[invoiceDates.length - 1];\n      \n      branchPeriods.set('default', {\n        start: actualStartDate,\n        end: actualEndDate,\n        invoices: allInvoices\n      });\n    }\n\n    // Use the most recent document period for display (or the one that matches the request)\n    let displayPeriod = Array.from(branchPeriods.values())[0];\n    for (const period of Array.from(branchPeriods.values())) {\n      if (period.start <= periodStart && period.end >= periodEnd) {\n        displayPeriod = period;\n        break;\n      }\n    }\n\n    // Fallback if no display period found\n    if (!displayPeriod) {\n      const invoiceDates = allInvoices.map(inv => new Date(inv.date)).sort((a, b) => a.getTime() - b.getTime());\n      if (invoiceDates.length > 0) {\n        displayPeriod = {\n          start: invoiceDates[0],\n          end: invoiceDates[invoiceDates.length - 1],\n          invoices: allInvoices\n        };\n      } else {\n        return null;\n      }\n    }\n\n    // Get summaries and daily data for the display period\n    const branchTotals = await this.getBranchSummariesByWeek(displayPeriod.start, displayPeriod.end);\n    const dailyTotals = await this.getDailySummariesByWeek(displayPeriod.start, displayPeriod.end);\n\n    // Calculate totals\n    const grandTotal = branchTotals.reduce((sum, branch) => sum + parseFloat(branch.totalValue), 0);\n    const totalInvoices = branchTotals.reduce((sum, branch) => sum + branch.invoiceCount, 0);\n\n    // Separate working days (Mon-Fri) from weekend (Sat-Sun)\n    const workingDaysTotals = dailyTotals.filter(day =>\n      !['Sábado', 'Domingo', 'Saturday', 'Sunday'].includes(day.dayOfWeek)\n    );\n    const weekendTotals = dailyTotals.filter(day =>\n      ['Sábado', 'Domingo', 'Saturday', 'Sunday'].includes(day.dayOfWeek)\n    );\n\n    const workingDaysTotal = workingDaysTotals.reduce((sum, day) => sum + parseFloat(day.totalValue), 0);\n    const weekendTotal = weekendTotals.reduce((sum, day) => sum + parseFloat(day.totalValue), 0);\n    const weekTotal = workingDaysTotal + weekendTotal;\n\n    // Calculate totals based on document types from ALL invoices\n    const totalPayable = allInvoices\n      .filter(invoice => invoice.documentType === 'A_PAGAR')\n      .reduce((sum, invoice) => sum + parseFloat(invoice.value), 0);\n\n    const totalReceivable = allInvoices\n      .filter(invoice => invoice.documentType === 'A_RECEBER')\n      .reduce((sum, invoice) => sum + parseFloat(invoice.value), 0);\n\n    // Use the individual document period for display\n    const weekPeriod = `${displayPeriod.start.toLocaleDateString('pt-BR')} - ${displayPeriod.end.toLocaleDateString('pt-BR')}`;\n\n    return {\n      branchTotals,\n      dailyTotals,\n      weeklyTotals: {\n        workingDaysTotal: workingDaysTotal.toFixed(2),\n        weekendTotal: weekendTotal.toFixed(2),\n        weekTotal: weekTotal.toFixed(2),\n        workingDays: workingDaysTotals.length,\n        weekendDays: weekendTotals.length,\n        weekPeriod,\n        totalPayable,\n        totalReceivable,\n      },\n      grandTotal: grandTotal.toFixed(2),\n      totalInvoices\n    };\n  }\n\n  setProcessingState(isProcessing: boolean): void {\n    this.isProcessing = isProcessing;\n  }\n\n  getProcessingState(): boolean {\n    return this.isProcessing;\n  }\n\n  async clearAllData(): Promise<void> {\n    this.invoices.clear();\n    this.branchSummaries.clear();\n    this.dailySummaries.clear();\n    this.isProcessing = false;\n    console.log('All data cleared from storage');\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":9277},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, integer, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branch: text(\"branch\").notNull(),\n  invoiceNumber: text(\"invoice_number\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  supplier: text(\"supplier\"), // Added supplier field\n  weekStart: timestamp(\"week_start\").notNull(),\n  weekEnd: timestamp(\"week_end\").notNull(),\n  documentType: text(\"document_type\").notNull().default(\"A_PAGAR\"),\n  sourceFile: text(\"source_file\"), // Track which file this invoice came from\n});\n\nexport const branchSummaries = pgTable(\"branch_summaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branch: text(\"branch\").notNull(),\n  invoiceCount: integer(\"invoice_count\").notNull().default(0),\n  totalValue: decimal(\"total_value\", { precision: 12, scale: 2 }).notNull().default(\"0\"),\n  weekStart: timestamp(\"week_start\").notNull(),\n  weekEnd: timestamp(\"week_end\").notNull(),\n});\n\nexport const dailySummaries = pgTable(\"daily_summaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  dayOfWeek: text(\"day_of_week\").notNull(),\n  totalValue: decimal(\"total_value\", { precision: 12, scale: 2 }).notNull().default(\"0\"),\n  invoiceCount: integer(\"invoice_count\").notNull().default(0),\n  branch: text(\"branch\"),\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n});\n\nexport const insertBranchSummarySchema = createInsertSchema(branchSummaries).omit({\n  id: true,\n});\n\nexport const insertDailySummarySchema = createInsertSchema(dailySummaries).omit({\n  id: true,\n});\n\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type BranchSummary = typeof branchSummaries.$inferSelect;\nexport type InsertBranchSummary = z.infer<typeof insertBranchSummarySchema>;\nexport type DailySummary = typeof dailySummaries.$inferSelect;\nexport type InsertDailySummary = z.infer<typeof insertDailySummarySchema>;\n\n// Additional types for API responses\nexport type ProcessedData = {\n  branchTotals: BranchSummary[];\n  dailyTotals: DailySummary[];\n  weeklyTotals: {\n    workingDaysTotal: string;\n    weekendTotal: string;\n    weekTotal: string;\n    workingDays: number;\n    weekendDays: number;\n    weekPeriod: string;\n    totalPayable: number;\n    totalReceivable: number;\n  };\n  grandTotal: string;\n  totalInvoices: number;\n};\n\nexport type FileUploadResponse = {\n  success: boolean;\n  message: string;\n  fileName?: string;\n  fileSize?: number;\n  processedData?: ProcessedData;\n  allFilesData?: Array<{\n    fileName: string;\n    period: string;\n    data: ProcessedData;\n    documentTypes: string[];\n  }>;\n};\n\nexport interface UploadRequest {\n  files: File[];\n  documentTypes?: Record<number, string>;\n}\n\nexport const WeeklyTotalsSchema = z.object({\n  grandTotal: z.number(),\n  totalInvoices: z.number(),\n  workingDaysTotal: z.number(),\n  weekendTotal: z.number(),\n  weekTotal: z.number(),\n  weekPeriod: z.string(),\n  totalPayable: z.number(),\n  totalReceivable: z.number(),\n});","size_bytes":3358},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/data-preview.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, RotateCcw, Info, Loader2 } from \"lucide-react\";\nimport { ProcessedData } from \"@shared/schema\";\n\ninterface DataPreviewProps {\n  data: ProcessedData;\n  onGenerateExcel: () => void;\n  onReset: () => Promise<void>;\n  isGeneratingExcel: boolean;\n}\n\nexport function DataPreview({ data, onGenerateExcel, onReset, isGeneratingExcel }: DataPreviewProps) {\n  const [isResetting, setIsResetting] = React.useState(false);\n\n  const handleReset = async () => {\n    setIsResetting(true);\n    try {\n      await onReset();\n    } catch (error) {\n      console.error('Error during reset:', error);\n    } finally {\n      setIsResetting(false);\n    }\n  };\n\n  const formatCurrency = (value: string | number): string => {\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(numValue);\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Date(date).toLocaleDateString('pt-BR');\n  };\n\n  return (\n    <div className=\"space-y-8 fade-in\" data-testid=\"data-preview\">\n      {/* Actions Section */}\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">Exportar Relatório</h3>\n              <p className=\"text-muted-foreground\">Gerar arquivo Excel com formatação personalizada</p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button \n                variant=\"outline\" \n                onClick={handleReset}\n                disabled={isResetting || isGeneratingExcel}\n                data-testid=\"button-reset\"\n              >\n                {isResetting ? (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <RotateCcw className=\"h-4 w-4 mr-2\" />\n                )}\n                {isResetting ? \"Limpando...\" : \"Processar Novamente\"}\n              </Button>\n              \n            </div>\n          </div>\n\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2342},"client/src/components/file-upload.tsx":{"content":"import React, { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Upload, File, X, Loader2, Download } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileUploadProps {\n  onFileSelect: (files: File[]) => void;\n  selectedFiles: File[];\n  onRemoveFile: (index: number) => void;\n  onDocumentTypeChange?: (fileIndex: number, types: string[]) => void;\n  documentTypes: Record<number, string[]>;\n  isUploading: boolean;\n  onProcessFiles: () => void;\n  hasUploadedData?: boolean;\n  onGenerateExcel?: () => void;\n  isGeneratingExcel?: boolean;\n}\n\nexport function FileUpload({ \n  onFileSelect, \n  selectedFiles, \n  onRemoveFile, \n  onDocumentTypeChange,\n  documentTypes,\n  isUploading,\n  onProcessFiles,\n  hasUploadedData = false,\n  onGenerateExcel,\n  isGeneratingExcel = false\n}: FileUploadProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [localDocumentTypes, setLocalDocumentTypes] = useState<Record<number, string[]>>(documentTypes || {});\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    const csvFiles = files.filter(file => file.type === 'text/csv' || file.name.endsWith('.csv'));\n\n    if (csvFiles.length > 0) {\n      onFileSelect([...selectedFiles, ...csvFiles]);\n    } else {\n      alert('Por favor, selecione apenas arquivos CSV');\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const csvFiles = Array.from(files).filter(file => file.type === 'text/csv' || file.name.endsWith('.csv'));\n      onFileSelect([...selectedFiles, ...csvFiles]);\n    }\n    // Reset the file input value to allow selecting the same file again\n    if (e.target) {\n      e.target.value = \"\";\n    }\n  };\n\n  const handleSelectClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const handleReset = () => {\n    // Clear the selected files\n    onFileSelect([]);\n    // Reset document types\n    setLocalDocumentTypes({});\n    // Reset the file input's value to allow selecting the same file again\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const handleDocumentTypeChange = (fileIndex: number, type: string, checked: boolean) => {\n    setLocalDocumentTypes(prev => {\n      const currentTypes = prev[fileIndex] || ['A_PAGAR'];\n      let newTypes;\n\n      if (checked) {\n        // Add type if not already present\n        newTypes = currentTypes.includes(type) ? currentTypes : [...currentTypes, type];\n      } else {\n        // Remove type, but ensure at least one remains\n        newTypes = currentTypes.filter(t => t !== type);\n        if (newTypes.length === 0) {\n          newTypes = ['A_PAGAR']; // Default fallback\n        }\n      }\n\n      return { ...prev, [fileIndex]: newTypes };\n    });\n\n    // Call parent handler with updated types\n    const currentTypes = localDocumentTypes[fileIndex] || ['A_PAGAR'];\n    let newTypes;\n\n    if (checked) {\n      newTypes = currentTypes.includes(type) ? currentTypes : [...currentTypes, type];\n    } else {\n      newTypes = currentTypes.filter(t => t !== type);\n      if (newTypes.length === 0) {\n        newTypes = ['A_PAGAR'];\n      }\n    }\n\n    onDocumentTypeChange?.(fileIndex, newTypes);\n  };\n\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardContent className=\"p-6\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Upload do Relatório CSV</h2>\n          <p className=\"text-muted-foreground\">Faça upload do arquivo CSV contendo o relatório semanal das notas fiscais</p>\n        </div>\n\n        <div \n          className={cn(\n            \"border-2 border-dashed rounded-lg p-8 text-center mb-6 transition-all duration-300\",\n            isDragOver \n              ? \"border-primary bg-primary/5 scale-[1.01]\" \n              : \"border-border hover:border-primary hover:bg-primary/2\",\n            isUploading && \"pointer-events-none opacity-50\"\n          )}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          data-testid=\"upload-area\"\n        >\n          <div className=\"flex flex-col items-center\">\n            <Upload className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">Arraste e solte seu arquivo aqui</h3>\n            <p className=\"text-muted-foreground mb-4\">ou clique para selecionar</p>\n            <Button \n              onClick={handleSelectClick}\n              disabled={isUploading}\n              data-testid=\"button-select-file\"\n            >\n              Selecionar Arquivo CSV\n            </Button>\n          </div>\n          <input \n            ref={fileInputRef}\n            type=\"file\" \n            accept=\".csv\" \n            multiple\n            className=\"hidden\" \n            onChange={handleFileInputChange}\n            data-testid=\"input-file\"\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span>Formatos aceitos: CSV</span>\n          <span>Tamanho máximo: 10MB</span>\n        </div>\n\n        {selectedFiles.length > 0 && (\n          <div className=\"mt-6 space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium text-foreground\">Arquivos Selecionados ({selectedFiles.length})</h3>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleReset}\n                  disabled={isUploading}\n                >\n                  Remover Todos\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={onProcessFiles}\n                  disabled={isUploading}\n                  data-testid=\"button-process-file\"\n                >\n                  Processar {selectedFiles.length} Arquivo(s)\n                </Button>\n              </div>\n            </div>\n            {selectedFiles.map((file, index) => (\n              <div key={`${file.name}-${index}`} className=\"p-4 bg-muted rounded-lg fade-in\" data-testid=\"file-info\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <File className=\"h-6 w-6 text-green-600\" />\n                    <div>\n                      <p className=\"font-medium text-foreground\" data-testid=\"text-filename\">{file.name}</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"text-filesize\">{formatFileSize(file.size)}</p>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={() => onRemoveFile(index)}\n                    disabled={isUploading}\n                    data-testid=\"button-remove-file\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm font-medium text-foreground\">Tipo de documento:</p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`a-pagar-${index}`}\n                        checked={(localDocumentTypes[index] || ['A_PAGAR']).includes('A_PAGAR')}\n                        onCheckedChange={(checked) => handleDocumentTypeChange(index, 'A_PAGAR', checked as boolean)}\n                        data-testid={`checkbox-a-pagar-${index}`}\n                      />\n                      <label \n                        htmlFor={`a-pagar-${index}`} \n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                      >\n                        A pagar\n                      </label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`a-receber-${index}`}\n                        checked={(localDocumentTypes[index] || []).includes('A_RECEBER')}\n                        onCheckedChange={(checked) => handleDocumentTypeChange(index, 'A_RECEBER', checked as boolean)}\n                        data-testid={`checkbox-a-receber-${index}`}\n                      />\n                      <label \n                        htmlFor={`a-receber-${index}`} \n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                      >\n                        A receber\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Excel export button integrated in the card */}\n        {hasUploadedData && (\n          <div className=\"flex justify-center mt-6 pt-6 border-t border-border\">\n            <Button\n              onClick={onGenerateExcel}\n              disabled={isGeneratingExcel}\n              className=\"px-6 py-3\"\n            >\n              {isGeneratingExcel ? (\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <Download className=\"h-4 w-4 mr-2\" />\n              )}\n              {isGeneratingExcel ? \"Gerando...\" : \"Exportar Relatório para Excel\"}\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10476},"client/src/components/processing-status.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ProcessingStatusProps {\n  isVisible: boolean;\n  progress: number;\n  currentFile?: number;\n  totalFiles?: number;\n}\n\nexport function ProcessingStatus({ isVisible, progress, currentFile = 0, totalFiles = 1 }: ProcessingStatusProps) {\n  if (!isVisible) return null;\n\n  return (\n    <Card className=\"shadow-sm fade-in\" data-testid=\"processing-status\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"animate-spin\">\n            <Loader2 className=\"h-6 w-6 text-primary\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">\n              {totalFiles > 1 ? `Processando arquivo ${currentFile + 1} de ${totalFiles}...` : 'Processando arquivo...'}\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">Analisando dados e gerando relatórios</p>\n          </div>\n        </div>\n        <div className=\"mt-4\">\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${progress}%` }}\n              data-testid=\"progress-bar\"\n            />\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\" data-testid=\"text-progress\">\n            Processando... {progress}%\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1527},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport { ProcessedData, FileUploadResponse } from \"@shared/schema\";\n\nexport async function uploadCSVFile(files: File[], clearData: boolean = false, documentTypes: Record<number, string[]> = {}): Promise<FileUploadResponse> {\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('files', file);\n  });\n\n  // Add document types to form data\n  formData.append('documentTypes', JSON.stringify(documentTypes));\n\n  const url = clearData ? '/api/upload-csv?clearData=true' : '/api/upload-csv';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Erro ao fazer upload do arquivo');\n  }\n\n  return response.json();\n}\n\nexport async function getProcessedData(): Promise<{ success: boolean; data: ProcessedData }> {\n  const response = await apiRequest('GET', '/api/processed-data');\n  return response.json();\n}\n\nexport async function uploadExcelSummary(files: File[]): Promise<{ success: boolean; message: string; data: any }> {\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('files', file);\n  });\n\n  const response = await fetch('/api/upload-csv-summary', {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Erro ao fazer upload dos arquivos');\n  }\n\n  return response.json();\n}\n\nexport async function downloadSummaryExcel(): Promise<Blob> {\n  const response = await fetch('/api/export-summary-excel', {\n    method: 'GET',\n  });\n\n  if (!response.ok) {\n    throw new Error('Erro ao gerar arquivo Excel de resumo');\n  }\n\n  return response.blob();\n}\n\nexport async function downloadExcel(reportInfo?: { name: string; startDate: string; endDate: string; categories: string[]; }): Promise<Blob> {\n  const response = await fetch('/api/export-excel', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(reportInfo || {}),\n  });\n\n  if (!response.ok) {\n    throw new Error('Erro ao gerar arquivo Excel');\n  }\n\n  return response.blob();\n}\n\nexport interface SummaryData {\n  branches: Array<{\n    name: string;\n    totalAPagar: number;\n    totalAReceber: number;\n    total: number;\n  }>;\n  dailyTotals?: Array<{\n    day: string;\n    total: number;\n  }>;\n  weekdayTotals?: Array<{\n    day: string;\n    total: number;\n  }>;\n  dateSpecificTotals?: Array<{\n    day: string;\n    total: number;\n  }>;\n  documentDates?: Array<{\n    day: string;\n    dayOfWeek: string;\n    total: number;\n  }>;\n  grandTotal: number;\n  grandTotalAPagar: number;\n  grandTotalAReceber: number;\n}\n\nexport async function uploadCSVSummary(files: File[]): Promise<{ success: boolean; message: string; data: SummaryData }> {\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('files', file);\n  });\n\n  const response = await fetch('/api/upload-csv-summary', {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Erro ao processar arquivos CSV');\n  }\n\n  return response.json();\n}","size_bytes":3241},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { FileUpload } from \"@/components/file-upload\";\nimport { ProcessingStatus } from \"@/components/processing-status\";\nimport { DataPreview } from \"@/components/data-preview\";\nimport { uploadCSVFile, downloadExcel, uploadCSVSummary, downloadSummaryExcel, SummaryData } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileText, Upload, File, X, Download, Loader2, Calendar } from \"lucide-react\";\nimport { ProcessedData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { format, parse } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\n// Define ReportInfo type for Excel generation\ntype ReportInfoData = {\n  name: string;\n  startDate: string;\n  endDate: string;\n  categories: string[];\n};\nimport { cn } from \"@/lib/utils\";\n\n// Helper function to format file size\nconst formatFileSize = (bytes: number, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nexport default function Home() {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [processedData, setProcessedData] = useState<ProcessedData | null>(null);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n  const [documentTypes, setDocumentTypes] = useState<Record<number, string[]>>({});\n  const [hasUploadedData, setHasUploadedData] = useState(false);\n\n  // Summary states\n  const [summaryFiles, setSummaryFiles] = useState<File[]>([]);\n  const [summaryData, setSummaryData] = useState<SummaryData | null>(null);\n  const [summaryIsDragOver, setSummaryIsDragOver] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Upload mutation for multiple CSV files\n  const uploadMutation = useMutation({\n    mutationFn: async (files: File[]) => {\n      setProcessedData(null);\n      const data = await uploadCSVFile(files, true, documentTypes);\n      return data;\n    },\n    onMutate: () => {\n      setProcessingProgress(0);\n      setCurrentFileIndex(0);\n    },\n    onSuccess: (data) => {\n      setProcessingProgress(100);\n      setTimeout(() => {\n        if (data.processedData) {\n          setProcessedData(data.processedData);\n        }\n        setHasUploadedData(true);\n        toast({\n          title: \"Sucesso\",\n          description: data.message,\n        });\n      }, 500);\n    },\n    onError: (error: Error) => {\n      setProcessingProgress(0);\n      setCurrentFileIndex(0);\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Excel generation mutation for processed data\n  const excelMutation = useMutation({\n    mutationFn: (info: ReportInfoData) => downloadExcel(info),\n    onSuccess: (blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `relatorio_notas_fiscais_${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download iniciado\",\n        description: \"O arquivo Excel foi gerado e o download iniciou automaticamente.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Summary CSV upload mutation\n  const summaryUploadMutation = useMutation({\n    mutationFn: uploadCSVSummary,\n    onSuccess: (response) => {\n      setSummaryData(response.data);\n      toast({\n        title: \"Sucesso\",\n        description: response.message,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Summary Excel generation mutation\n  const summaryExcelMutation = useMutation({\n    mutationFn: downloadSummaryExcel,\n    onSuccess: (blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `resumo_total_filiais_${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download iniciado\",\n        description: \"O arquivo Excel de resumo foi gerado e o download iniciou automaticamente.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const handleFileSelect = (files: File[]) => {\n    setSelectedFiles(files);\n    files.forEach((_, index) => {\n      setDocumentTypes(prev => {\n        if (!(index in prev)) {\n          return { ...prev, [index]: ['A_PAGAR'] };\n        }\n        return prev;\n      });\n    });\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n    setDocumentTypes(prev => {\n      const newTypes = { ...prev };\n      delete newTypes[index];\n      const reindexed: Record<number, string[]> = {};\n      Object.entries(newTypes).forEach(([key, value]) => {\n        const oldIndex = parseInt(key);\n        if (oldIndex > index) {\n          reindexed[oldIndex - 1] = value;\n        } else {\n          reindexed[oldIndex] = value;\n        }\n      });\n      return reindexed;\n    });\n  };\n\n  const handleDocumentTypeChange = (fileIndex: number, types: string[]) => {\n    setDocumentTypes(prev => ({ ...prev, [fileIndex]: types }));\n  };\n\n  const handleUpload = async () => {\n    if (selectedFiles.length === 0) return;\n    uploadMutation.mutate(selectedFiles);\n  };\n\n  const handleGenerateExcel = () => {\n    const reportInfo = {\n      name: 'Relatório de Notas Fiscais',\n      startDate: '',\n      endDate: '',\n      categories: []\n    };\n    excelMutation.mutate(reportInfo);\n  };\n\n  const handleReset = async () => {\n    try {\n      const response = await fetch('/api/clear-data', {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao limpar dados');\n      }\n      setSelectedFiles([]);\n      setProcessedData(null);\n      setProcessingProgress(0);\n      setCurrentFileIndex(0);\n      setDocumentTypes({});\n      setHasUploadedData(false);\n      uploadMutation.reset();\n      excelMutation.reset();\n\n      setTimeout(() => {\n        toast({\n          title: \"Dados limpos\",\n          description: \"Os dados anteriores foram removidos. Selecione novos arquivos para processar.\",\n        });\n      }, 100);\n    } catch (error) {\n      console.error('Error clearing data:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao limpar dados anteriores\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Summary handlers\n  const handleSummaryFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      const csvFiles = Array.from(files).filter(file => file.type === 'text/csv' || file.name.endsWith('.csv'));\n      setSummaryFiles(prev => [...prev, ...csvFiles]);\n    }\n    // Reset the file input value to allow selecting the same file again\n    if (event.target) {\n      event.target.value = \"\";\n    }\n  };\n\n  const handleSummaryDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setSummaryIsDragOver(true);\n  };\n\n  const handleSummaryDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setSummaryIsDragOver(false);\n  };\n\n  const handleSummaryDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setSummaryIsDragOver(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    const csvFiles = files.filter(file => file.type === 'text/csv' || file.name.endsWith('.csv'));\n\n    if (csvFiles.length > 0) {\n      setSummaryFiles(prev => [...prev, ...csvFiles]);\n    } else {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, selecione apenas arquivos CSV\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveSummaryFile = (index: number) => {\n    setSummaryFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleProcessSummary = () => {\n    if (summaryFiles.length === 0) return;\n    summaryUploadMutation.mutate(summaryFiles);\n  };\n\n  const handleGenerateSummaryExcel = () => {\n    summaryExcelMutation.mutate();\n  };\n\n\n\n  const isProcessing = uploadMutation.isPending && processingProgress < 100;\n  const showDataPreview = processedData && !isProcessing;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"bg-card border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center justify-center w-10 h-10 bg-primary rounded-lg\">\n                <FileText className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-foreground\">NotaFlex</h1>\n                <p className=\"text-sm text-muted-foreground\">Processamento de relatórios semanais</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">Versão 1.5.0</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <FileUpload\n            onFileSelect={handleFileSelect}\n            selectedFiles={selectedFiles}\n            onRemoveFile={handleRemoveFile}\n            onDocumentTypeChange={handleDocumentTypeChange}\n            documentTypes={documentTypes}\n            isUploading={uploadMutation.isPending}\n            onProcessFiles={handleUpload}\n            hasUploadedData={hasUploadedData}\n            onGenerateExcel={handleGenerateExcel}\n            isGeneratingExcel={excelMutation.isPending}\n          />\n        </div>\n\n        <div className=\"mb-8\">\n          <ProcessingStatus\n            isVisible={isProcessing}\n            progress={processingProgress}\n            currentFile={currentFileIndex}\n            totalFiles={selectedFiles.length}\n          />\n        </div>\n\n        {showDataPreview && (\n          <div className=\"mt-8 space-y-6 mb-16\">\n            <DataPreview data={processedData} onGenerateExcel={handleGenerateExcel} onReset={handleReset} isGeneratingExcel={excelMutation.isPending} />\n\n            {/* Show individual file results if multiple files were processed */}\n\n          </div>\n        )}\n\n        {/* Second CSV Upload Section */}\n        <div className=\"mb-8 mt-16\">\n          <Card className=\"shadow-sm border-2\">\n            <CardContent className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Resumo Geral de Relatórios</h2>\n                <p className=\"text-muted-foreground\">Faça upload dos arquivos CSV gerados a partir dos Excel exportados para criar um resumo consolidado</p>\n              </div>\n\n              <div\n                className={cn(\n                  \"border-2 border-dashed rounded-lg p-8 text-center mb-6 transition-all duration-300\",\n                  summaryIsDragOver\n                    ? \"border-primary bg-primary/5 scale-[1.01]\"\n                    : \"border-border hover:border-primary hover:bg-primary/2\",\n                  summaryUploadMutation.isPending && \"pointer-events-none opacity-50\"\n                )}\n                onDragOver={handleSummaryDragOver}\n                onDragLeave={handleSummaryDragLeave}\n                onDrop={handleSummaryDrop}\n              >\n                <div className=\"flex flex-col items-center\">\n                  <Upload className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">Arraste e solte os arquivos CSV aqui</h3>\n                  <p className=\"text-muted-foreground mb-4\">ou clique para selecionar múltiplos arquivos</p>\n                  <input\n                    type=\"file\"\n                    accept=\".csv\"\n                    multiple\n                    className=\"hidden\"\n                    id=\"summary-file-input\"\n                    onChange={handleSummaryFileSelect}\n                  />\n                  <Button\n                    onClick={() => document.getElementById('summary-file-input')?.click()}\n                    disabled={summaryUploadMutation.isPending}\n                  >\n                    Selecionar Arquivos CSV para Resumo\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                <span>Formatos aceitos: CSV (gerados a partir do Excel)</span>\n                <span>Múltiplos arquivos suportados</span>\n              </div>\n\n              {summaryFiles.length > 0 && (\n                <div className=\"mt-6 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium text-foreground\">Arquivos CSV Selecionados ({summaryFiles.length})</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSummaryFiles([])}\n                        disabled={summaryUploadMutation.isPending}\n                      >\n                        Remover Todos\n                      </Button>\n                      <Button\n                        variant=\"default\"\n                        size=\"sm\"\n                        onClick={handleProcessSummary}\n                        disabled={summaryUploadMutation.isPending}\n                      >\n                        Processar {summaryFiles.length} Arquivo(s)\n                      </Button>\n                    </div>\n                  </div>\n                  {summaryFiles.map((file, index) => (\n                    <div key={`${file.name}-${index}`} className=\"p-4 bg-muted rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <File className=\"h-6 w-6 text-green-600\" />\n                          <div>\n                            <p className=\"font-medium text-foreground\">{file.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{formatFileSize(file.size)}</p>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveSummaryFile(index)}\n                          disabled={summaryUploadMutation.isPending}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {summaryData && (\n                <div className=\"mt-6 space-y-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-4\">Resumo por Filial</h3>\n                    <div className=\"grid gap-4\">\n                      {summaryData.branches.map((branch, index) => (\n                        <div key={index} className=\"flex justify-between items-center p-4 border rounded-lg bg-card\">\n                          <span className=\"font-medium text-card-foreground\">{branch.name}</span>\n                          <span className=\"text-lg font-bold text-green-600\">\n                            {new Intl.NumberFormat('pt-BR', {\n                              style: 'currency',\n                              currency: 'BRL'\n                            }).format(branch.total)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n\n\n\n                  <div className=\"flex justify-between items-center p-4 border-2 border-primary rounded-lg bg-primary/5\">\n                    <span className=\"font-bold text-primary text-lg\">TOTAL GERAL</span>\n                    <span className=\"text-xl font-bold text-primary\">\n                      {new Intl.NumberFormat('pt-BR', {\n                        style: 'currency',\n                        currency: 'BRL'\n                      }).format(summaryData.grandTotal)}\n                    </span>\n                  </div>\n\n                  <div className=\"flex justify-center mt-6\">\n                    <Button\n                      onClick={handleGenerateSummaryExcel}\n                      disabled={summaryExcelMutation.isPending}\n                      className=\"px-6 py-3\"\n                    >\n                      {summaryExcelMutation.isPending ? (\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      ) : (\n                        <Download className=\"h-4 w-4 mr-2\" />\n                      )}\n                      {summaryExcelMutation.isPending ? \"Gerando...\" : \"Exportar Resumo para Excel\"}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {selectedFiles.length === 0 && !processedData && !isProcessing && (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"mx-auto max-w-md\">\n              <FileText className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">Nenhum arquivo carregado</h3>\n              <p className=\"text-muted-foreground mb-6\">Faça upload do arquivo CSV para começar o processamento dos dados</p>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>📊 Processamento automático de relatórios</p>\n                <p>📈 Análise por filial e período</p>\n                <p>📄 Exportação em formato Excel</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n\n\n      </main>\n\n      <footer className=\"border-t border-border bg-card mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">© 2024 NotaFlex. Desenvolvido para processamento eficiente de relatórios.</p>\n            <p className=\"text-sm text-muted-foreground mt-2 sm:mt-0\">Versão 1.5.0</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":19420},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/report-info.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Calendar, User, Tag } from \"lucide-react\";\n\nexport interface ReportInfoData {\n  name: string;\n  startDate: string;\n  endDate: string;\n  categories: string[];\n}\n\ninterface ReportInfoProps {\n  data: ReportInfoData;\n  onChange: (data: ReportInfoData) => void;\n  disabled?: boolean;\n}\n\nexport function ReportInfo({ data, onChange, disabled = false }: ReportInfoProps) {\n  const availableCategories = [\n    { id: 'A_PAGAR', label: 'Contas a Pagar' },\n    { id: 'A_RECEBER', label: 'Contas a Receber' },\n    { id: 'VENDAS', label: 'Vendas' },\n    { id: 'COMPRAS', label: 'Compras' },\n    { id: 'IMPOSTOS', label: 'Impostos' },\n    { id: 'DESPESAS', label: 'Despesas Operacionais' }\n  ];\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...data,\n      name: e.target.value\n    });\n  };\n\n  const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...data,\n      startDate: e.target.value\n    });\n  };\n\n  const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...data,\n      endDate: e.target.value\n    });\n  };\n\n  const handleCategoryChange = (categoryId: string, checked: boolean) => {\n    let newCategories;\n    if (checked) {\n      newCategories = [...data.categories, categoryId];\n    } else {\n      newCategories = data.categories.filter(cat => cat !== categoryId);\n    }\n    \n    onChange({\n      ...data,\n      categories: newCategories\n    });\n  };\n\n  const handleReset = () => {\n    onChange({\n      name: '',\n      startDate: '',\n      endDate: '',\n      categories: ['A_PAGAR']\n    });\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardContent className=\"p-6\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Informações do Relatório</h2>\n          <p className=\"text-muted-foreground\">Configure as informações básicas do seu relatório</p>\n        </div>\n\n        {/* Nome */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <User className=\"h-5 w-5 text-muted-foreground\" />\n            <Label htmlFor=\"report-name\" className=\"text-sm font-medium text-foreground\">\n              Nome do Relatório / Empresa\n            </Label>\n          </div>\n          <Input\n            id=\"report-name\"\n            type=\"text\"\n            value={data.name}\n            onChange={handleNameChange}\n            disabled={disabled}\n            placeholder=\"Digite o nome do relatório ou empresa\"\n            className=\"w-full\"\n            data-testid=\"input-report-name\"\n          />\n        </div>\n\n        {/* Período */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n            <Label className=\"text-sm font-medium text-foreground\">Período</Label>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"start-date\" className=\"text-sm text-muted-foreground mb-2 block\">\n                Data Inicial\n              </Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={data.startDate}\n                onChange={handleStartDateChange}\n                disabled={disabled}\n                className=\"w-full\"\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"end-date\" className=\"text-sm text-muted-foreground mb-2 block\">\n                Data Final\n              </Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={data.endDate}\n                onChange={handleEndDateChange}\n                disabled={disabled}\n                className=\"w-full\"\n                data-testid=\"input-end-date\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Categorias */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Tag className=\"h-5 w-5 text-muted-foreground\" />\n            <Label className=\"text-sm font-medium text-foreground\">Categorias</Label>\n          </div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3\">\n            {availableCategories.map((category) => (\n              <div key={category.id} className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n                <Checkbox\n                  id={`category-${category.id}`}\n                  checked={data.categories.includes(category.id)}\n                  onCheckedChange={(checked) => handleCategoryChange(category.id, checked as boolean)}\n                  disabled={disabled}\n                  data-testid={`checkbox-category-${category.id}`}\n                />\n                <Label \n                  htmlFor={`category-${category.id}`}\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                >\n                  {category.label}\n                </Label>\n              </div>\n            ))}\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-3\">\n            Selecione as categorias que deseja incluir no relatório\n          </p>\n        </div>\n\n        {/* Reset Button */}\n        <div className=\"flex justify-end\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleReset}\n            disabled={disabled}\n            data-testid=\"button-reset-report-info\"\n          >\n            Limpar Campos\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6053}},"version":1}